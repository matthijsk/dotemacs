#+TITLE: Emacs Configuration

* Emacs settings
** Packages and use-package
This configuration file is loaded using ~(org-babel-load-file)~. To ensure
org-mode is properly initialized before loading this file ~package-archives~
settings and the call to ~(package-initialize)~ are done in [[file:init.el][init.el]].

Packages are installed and configured using [[https://github.com/jwiegley/use-package][use-package]].

** General settings
General Emacs settings that don't fall under any specific category.

Don't litter the init file with customization changes. Instead, write it to a
different file that is not tracked by version control.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

Set default coding system.
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC

Disable automatic backups. See
http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

Start Emacs as server for emacsclient processes.
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

Ask for confirmation when leaving Emacs.
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

Allow for basic paging in emacs shells.
#+BEGIN_SRC emacs-lisp
  (setenv "PAGER" "/bin/cat")
#+END_SRC

Increase warning limit to 100 MB for large files.
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold (* 100 1024 1024))
#+END_SRC

Fix slow redisplay on Windows for Emacsen older than 27 when certain special
characters are on screen. Since 27, this value defaults to ~t~ for Windows.
#+BEGIN_SRC emacs-lisp
  (when (and (eq system-type 'windows-nt) (< emacs-major-version 27))
    (setq inhibit-compacting-font-caches t))
#+END_SRC

Set fill-column to 80 characters. Use ~setq-default~ because fill-column becomes
buffer-local when set.
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC

Also end sentences with a period and a single space. This affects filling and
various commands such as ~(backward-sentence)~ and ~(forward-sentence)~.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Scrolling
Settings related to scrolling buffers.

Provide some context by have the cursor offset from the top and the bottom of
the buffer by three lines.
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 3)
#+END_SRC

Scroll by one line when reaching bottom of buffer instead of recentering the
buffer.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively most-positive-fixnum)
#+END_SRC

Don't scroll faster when the mouse wheel is turned faster. Also, use a fixed
scroll amount of three lines.
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-scroll-amount (quote (3 ((shift) . 1))))
#+END_SRC

** User interface
General Emacs settings relating to fonts, themes, etc.

*** Theme
Load [[https://github.com/nashamri/spacemacs-theme][spacemacs]] theme. When running ssh from a MINGW terminal, make sure it is
set to =xterm-256color= (under =options -> terminal=).
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-common
    :ensure spacemacs-theme

    :custom
    (spacemacs-theme-org-bold t)
    (spacemacs-theme-org-height nil)

    :config
    (defvar my-current-theme 'spacemacs-dark
      "Currently enabled theme.")

    ;; Load both light and dark themes, but don't enable yet.
    (load-theme 'spacemacs-light t t)
    (load-theme 'spacemacs-dark t t)

    (enable-theme my-current-theme)

    (defun my-toggle-theme ()
      "Toggle between light and dark (spacemacs) themes"
      (interactive)
      (disable-theme my-current-theme)
      (setq my-current-theme (if (eq my-current-theme 'spacemacs-dark)
                                 'spacemacs-light
                               'spacemacs-dark))
      (enable-theme my-current-theme)))
#+END_SRC

*** Miscellaneous
Disable the tool bar, the menu bar and the scroll bars.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (when (featurep 'scroll-bar)
    (set-scroll-bar-mode nil))
#+END_SRC

Default to displaying line numbers as relative.
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
#+END_SRC

Display time as 24h.
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
#+END_SRC

Use a visible bell.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

Don't blink the cursor.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)                   ; Graphical displays
  (setq visible-cursor nil)               ; Text terminal
#+END_SRC

** Global key bindings
Set global key bindings, not related to any specific packages.

Reload ('revert') a buffer with =F5= without asking for confirmation, and
preserve all modes.
#+BEGIN_SRC emacs-lisp
  (defun my-revert-buffer ()
    "Revert a buffer without asking for confirmation and preserve all modes."
    (interactive)
    (revert-buffer nil t t))

  (global-set-key (kbd "<f5>") 'my-revert-buffer)
#+END_SRC

Load alternate file with =F6= (useful for switching .c and .h).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>") 'ff-find-other-file)
#+END_SRC

Exhibit expected X clipboard behaviour (yank with middle mouse button).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<mouse-2>") 'clipboard-yank)
  (setq-default select-enable-primary t)
#+END_SRC

Bind mouse buttons to Info-mode and help-mode navigation.
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'info
    '(if (eq system-type 'windows-nt)
         (eval-when-compile (define-key Info-mode-map (kbd "<mouse-4>") 'Info-history-back)
                            (define-key Info-mode-map (kbd "<mouse-5>") 'Info-history-forward))
       (define-key Info-mode-map (kbd "<mouse-8>") 'Info-history-back)
       (define-key Info-mode-map (kbd "<mouse-9>") 'Info-history-forward)))

  (eval-after-load 'help
    '(if (eq system-type 'windows-nt)
         (eval-when-compile (define-key help-mode-map (kbd "<mouse-4>") 'help-go-back)
                            (define-key help-mode-map (kbd "<mouse-5>") 'help-go-forward))
       (define-key help-mode-map (kbd "<mouse-8>") 'help-go-back)
       (define-key help-mode-map (kbd "<mouse-9>") 'help-go-forward)))
#+END_SRC

Disable =C-h h=, which is bound to ~view-hello-file~. I sometimes press this
accidentally. As opening the HELLO file takes long enough to be annoying disable
this binding here.
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-h h"))
#+END_SRC

Some sane bindings for making and deleting frames (an Emacs 'frame' is a
'window' in modern terms). =C-x 5 2= and =C-x 5 0= are just...too much. So
instead use =C-c n= for a new frame and =C-c x= (and =M-<f4>=) to delete the
frame.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c n") 'make-frame-command)

  (global-set-key (kbd "C-c x") 'delete-frame)
  (global-set-key (kbd "M-<f4>") 'delete-frame)
#+END_SRC

When I call kill-buffer I pretty much always mean to kill the current buffer.
The default functionality is to prompt for a buffer name. Instead, I want the
current buffer to be killed immediately. Recent versions (26 and higher) have a
function ~kill-current-buffer~, which appears to do the same, with some extra
house keeping. However, occasionally I have to use an older Emacs, so use this
solution instead.
#+BEGIN_SRC emacs-lisp
  (defun my-kill-buffer ()
    "Kill current buffer without prompting"
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'my-kill-buffer)
#+END_SRC

Bind =hippie-expand= to =M-/=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

** Enable disabled commands
Some commands are disabled by default, enable these so Emacs doesn't
ask for confirmation every time the command is executed.

Allow narrowing.
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

Allow upcasing and lowercasing of regions.
#+BEGIN_SRC emacs-lisp
  (put 'upcase-region   'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

** Programming settings
Settings for setting up a programming environment.

Enable eldoc-mode for elisp buffers.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

Highlight matching parentheses.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Customize comment-dwim so it does exactly what I want it to do:
- If a region is active, comment it if not commented or uncomment if commented.
- Otherwise, comment or uncomment the current line and move to the next line.
Seriously, Emacs is awesome. I love this kind of customization power.
#+BEGIN_SRC emacs-lisp
  (defun my-comment-dwim (arg)
    "Call the comment command you want (Do What I Mean).
  If the region is active and `transient-mark-mode' is on, call
  `comment-region' (unless it only consists of comments, in which
  case it calls `uncomment-region').  Else, it calls
  `comment-line'.  Custom implementation derived from
  `comment-dwim'. The difference is that the original function
  appends a comment to a line while this function comments the
  line itself."
    (interactive "*P")
    (comment-normalize-vars)
    (if (use-region-p)
        (comment-or-uncomment-region (region-beginning) (region-end) arg)
      (comment-line 1)))
#+END_SRC

Autoscroll compilation window and stop on first error.
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC

Set c and sh indentation to 2, and never indent with tabs.
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :defer t
    :custom
    (c-basic-offset 2))

  (use-package sh-script
    :defer t
    :custom
    (sh-basic-offset 2))

  (setq-default indent-tabs-mode nil)
#+END_SRC

Set some modes for specific file types.
- Set ~xml-mode~ when loading =cbproj= and =groupproj= files.
- Set ~c++-mode~ when loading =.rc= and =.rh= files.
- Set ~conf-mode~ when loading a Doxygen configuration file.
- Set ~conf-mode~ when loading a .clang-format file.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cbproj\\'" . xml-mode))
  (add-to-list 'auto-mode-alist '("\\.groupproj\\'" . xml-mode))

  (add-to-list 'auto-mode-alist '("\\.rh\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.rc\\'" . c++-mode))

  (add-to-list 'auto-mode-alist '("Doxyfile\\'" . conf-mode))

  (add-to-list 'auto-mode-alist '("\\.clang-format\\'" . conf-mode))
#+END_SRC

Highlight =TODO= keywords in all programming modes using a special face.
#+BEGIN_SRC emacs-lisp
  (defun my-prog-mode-todo-font-lock ()
    "Font lock for \"TODO\" strings in prog-mode major modes.
  Sets face to face `font-lock-warning-face'."
    (font-lock-add-keywords nil
                            '(("\\<\\(TODO\\).*:" 1 'font-lock-warning-face prepend))))

  (add-hook 'prog-mode-hook 'my-prog-mode-todo-font-lock)
#+END_SRC

** Default search function
Define an alias for whatever search function strikes my fancy today. This makes
it easier to change functionality without the tedium of having to rebind all
keys.
#+BEGIN_SRC emacs-lisp
  (defalias 'my-search 'helm-occur)
  (global-set-key (kbd "C-s") 'my-search)
#+END_SRC

** Find configuration files
This configuration file is written in =org-mode=. The file is
tangled into an =.el= file using an ~(org-babel-load-file)~ call in
=init.el= when Emacs starts.

These functions enable quick access to the configuration file and the
Emacs init file.
#+BEGIN_SRC emacs-lisp
  (defun my-find-configuration-file ()
    "Opens user configuration file in a new buffer.

  The file `my-configuration-file' is loaded in `user-init-file'.
  Use `my-find-init-file' to open `user-init-file' instead."
    (interactive)
    (find-file my-configuration-file))

  (defun my-find-init-file ()
    "Opens `user-init-file' in a new buffer."
    (interactive)
    (find-file user-init-file))
#+END_SRC

** Spell check
Use ispell or hunspell as spell checker if available.
#+BEGIN_SRC emacs-lisp
  (cond ((executable-find "ispell"))
        ((executable-find "hunspell")
         (setq ispell-program-name "hunspell")
         (setq ispell-really-hunspell t)))
#+END_SRC

** IBuffer
Remap ~list-buffers~ (=C-x C-b=) to ~ibuffer~.

Use a human-readable Size column for =ibuffer=. Taken from [[https://www.emacswiki.org/emacs/IbufferMode#toc12][Emacs Wiki]].
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :bind (([remap list-buffers] . ibuffer))
    :config
    ;; Use human readable Size column instead of original one.
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    ;; Modify the default ibuffer-formats.
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 18 18 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  filename-and-process))))
#+END_SRC

** Ediff
Always split windows horizontally when running ediff. This is more comfortable
to me on modern high resolution screens.
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-merge-split-window-function 'split-window-horizontally)
#+END_SRC

Ensure org-mode buffers are fully expanded.
#+BEGIN_SRC emacs-lisp
  (add-hook 'ediff-prepare-buffer-hook (lambda ()
                                         "Ensure org-mode buffers are fully expanded."
                                         (when (eq major-mode 'org-mode)
                                           (org-show-all))))
#+END_SRC

Most GNU/Linux systems I use have no window manager installed (such as servers),
or a tiling window manager (for personal use). When ediff runs in a terminal,
the control frame is embedded in the current frame, instead of in a separate
frame. I would like the same behavior when Emacs runs in a tiling window
manager, as otherwise the floating control frame is immediately tiled by the
window manager and thus becomes disproportionately large (depending on how many
windows are already open).
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'gnu/linux)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+END_SRC

Press =d= to copy both A and B into C. Useful when the changes of both sides in
a conflict are needed. Taken from
[[https://stackoverflow.com/questions/9656311/conflict-resolution-with-emacs-ediff-how-can-i-take-the-changes-of-both-version]].
#+BEGIN_SRC emacs-lisp
  (defun my-ediff-copy-both-to-C ()
    "Copy both A and B into C."
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))

  (defun my-add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'my-ediff-copy-both-to-C))
  (add-hook 'ediff-keymap-setup-hook 'my-add-d-to-ediff-mode-map)
#+END_SRC

** Eww
Set eww (shr) frame width.
#+BEGIN_SRC emacs-lisp
  (setq shr-width 80)
#+END_SRC

** Eshell
Initialize and set up eshell completion.
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda ()
                                (eshell-cmpl-initialize)
                                (setq eshell-cmpl-cycle-completions nil)))
#+END_SRC

** Dired
Use human-readable sizes in dired listings.
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC

** Convenience
Various functions to make editing more convenient.

Convenience function to open an OS native explorer window for the currently
visited file. Yes, I am aware of dired. Sometimes you still need explorer.
#+BEGIN_SRC emacs-lisp
  (defun my-browse-file-directory ()
    "Open the current file's directory however the OS would."
    (interactive)
    (if default-directory
        (browse-url-of-file (expand-file-name default-directory))
      (error "No `default-directory' to open")))
#+END_SRC

** Auth sources
Only ever use encrypted .authinfo.gpg files.
#+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC

** Man
#+BEGIN_SRC emacs-lisp
  (setenv "MANWIDTH" "80")
#+END_SRC

** Abbrev
Enable ~abbrev-mode~ for ~text-mode~.
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'abbrev-mode)
#+END_SRC

** Calendar
Add a function to insert the current date into the current buffer. Useful for
inserting the current date in a written form.
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :commands (my-insert-current-date)
    :config
    (calendar-set-date-style 'european)

    (defun my-insert-current-date (&optional nodayname)
      "Insert today's date using the current locale.
  With a prefix argument, the date is inserted without the day of
  the week. See also `calendar-date-string'."
      (interactive "*P")
      (insert (calendar-date-string (calendar-current-date) nil
                                    nodayname))))
#+END_SRC

** Generic-x
   Generic modes for common file types. Comes bundled with Emacs.
   #+BEGIN_SRC emacs-lisp
  (use-package generic-x
    ;; Ensure use-package does not try to load generic-x from a package archive.
    :ensure nil)
   #+END_SRC

* Diminish
[[https://github.com/myrjola/diminish.el][Diminish]] can be used as part of =use-package= to hide minor mode strings from
the modeline.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :pin melpa-stable)
#+END_SRC

* Default text scale
By default, scaling in Emacs (using =text-scale-adjust=) only scales
the text in the buffer, but not in the modeline or the
mini-buffer. The package [[https://github.com/purcell/default-text-scale][default-text-scale]] enables Emacs-wide
scaling.
#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :pin melpa-stable
    :bind (("C-M-="          . default-text-scale-increase)
           ("C-M--"          . default-text-scale-decrease)))

  ;; Bind keys dynamically depending on current OS, while still loading with
  ;; use-package. Hacky, but works.
  (if (eq system-type 'windows-nt)
      (use-package default-text-scale
        :pin melpa-stable
        :bind (("C-<wheel-up>"   . default-text-scale-increase)
               ("C-<wheel-down>" . default-text-scale-decrease)))
    (use-package default-text-scale
      :pin melpa-stable
      :bind (("C-<mouse-4>"    . default-text-scale-increase)
             ("C-<mouse-5>"    . default-text-scale-decrease))))
#+END_SRC

* Evil
I used to be a Vim user. To be honest, I guess I still am. Else why
commit the sacrilege of using Vim bindings in Emacs? The modal editing
model of Vim works really well for me, and [[https://github.com/emacs-evil/evil][Evil]] is hands down the best
Vim emulator for Emacs. This gives me the best of both worlds: the
modal editing of Vim combined with the extensibility of Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :pin melpa-stable
    :demand t
    :diminish undo-tree-mode
    :bind (:map evil-normal-state-map
                ("C-s"     . save-buffer)
                ("C-/"     . my-comment-dwim)
                ("C-f"     . my-search)

           :map evil-motion-state-map
                ("C-f" . my-search)

           :map evil-insert-state-map
                ("C-s" . save-buffer))
    :custom
    (evil-want-C-i-jump (display-graphic-p)
                        "Enable C-i when on a graphical display, and disable when
    on a terminal (to enable use of <TAB> in org-mode with evil-mode).")
    (evil-want-C-u-scroll t)
    (evil-symbol-word-search t)
    (evil-shift-width 2)
    (evil-move-beyond-eol t)

    :config
    ;; Ensure the yank register (on Windows, at least) is not overwritten when
    ;; performing a visual selection.
    ;; See https://emacs.stackexchange.com/questions/9344/pasting-in-evil-mode-when-theres-an-active-selection-copies-the-selection
    (fset 'evil-visual-update-x-selection 'ignore)

    (evil-define-key 'motion Man-mode-map (kbd "RET") 'man-follow)
    (evil-define-key 'motion help-mode-map (kbd "TAB") 'forward-button)
    (evil-define-key 'motion help-mode-map (kbd "S-TAB") 'backward-button)

    ;; Jump to tag and recenter.
    (advice-add 'evil-jump-to-tag     :after 'evil-scroll-line-to-center)
    (advice-add 'evil-jump-backward   :after 'evil-scroll-line-to-center)
    (advice-add 'evil-jump-forward    :after 'evil-scroll-line-to-center)
    (advice-add 'evil-search-next     :after 'evil-scroll-line-to-center)
    (advice-add 'evil-search-previous :after 'evil-scroll-line-to-center)

    ;; Ensure Emacs bindings for RET and SPC are available in motion state.
    ;; https://www.emacswiki.org/emacs/Evil#toc12
    (defun my-move-key (keymap-from keymap-to key)
      "Moves key binding from one keymap to another, deleting from the old location. "
      (define-key keymap-to key (lookup-key keymap-from key))
      (define-key keymap-from key nil))
    (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
    (my-move-key evil-motion-state-map evil-normal-state-map " ")

    ;; Set custom evil state when in these modes.
    (add-hook 'with-editor-mode-hook 'evil-normal-state)

    (dolist (mode '(shell-mode
                    eshell-mode
                    term-mode
                    inferior-emacs-lisp-mode
                    image-mode
                    dired-mode
                    help-mode
                    calculator-mode
                    profiler-report-mode))
      (evil-set-initial-state mode 'emacs))

    (dolist (mode '(messages-buffer-mode
                    eww-mode
                    eww-buffers-mode
                    elisp-refs-mode))
      (evil-set-initial-state mode 'motion)))
#+END_SRC

* Evil-leader
Configure [[https://github.com/cofi/evil-leader][evil-leader]] for leader keys with Evil.
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :pin melpa-stable
    :after evil

    :config
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "e"   'my-find-configuration-file
      "i"   'my-find-init-file

      "sh"  'eshell

      "wc"  'evil-window-delete

      "ww"  'evil-window-next

      "wo"  'delete-other-windows

      "ws"  'evil-window-split

      "wv"  'evil-window-vsplit

      "wh"  'evil-window-left
      "wj"  'evil-window-down
      "wk"  'evil-window-up
      "wl"  'evil-window-right

      "xk"  'my-kill-buffer
      "rb"  'revert-buffer
      "n"   'server-edit
      "xc"  'save-buffers-kill-terminal

      "l"   'whitespace-mode
      "hl"  'hl-line-mode
      "rl"  'display-line-numbers-mode

      "hf"  'describe-function
      "hv"  'describe-variable
      "hm"  'describe-mode

      "xd"  'dired

      "g"   'gnus

      "c"   'compile)

    (evil-leader/set-key-for-mode 'emacs-lisp-mode "c" 'emacs-lisp-byte-compile)

    ;; Enable evil leader.
    (global-evil-leader-mode)

    ;; Start evil.
    (evil-mode))
#+END_SRC

* Dash
Ensure [[https://github.com/magnars/dash.el][dash]] ("A modern list library for Emacs") is installed. It is used by many
packages.
#+BEGIN_SRC emacs-lisp
  (use-package dash
    :pin melpa-stable)
#+END_SRC

* Helm
Use [[https://emacs-helm.github.io/helm/][Helm]] for completion and narrowing.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :pin melpa-stable
    :bind (("M-x"     . helm-M-x)
           ("C-x b"   . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-c r"   . my-helm-resume-existing)
           ("C-x r l" . helm-bookmarks)

           :map evil-normal-state-map
           ("SPC" . helm-mini)

           :map evil-leader--default-map
           ("b"  . helm-mini)
           ("xf" . helm-find-files)
           ("hb" . helm-bookmarks)
           ("hs" . helm-semantic-or-imenu)
           ("hr" . my-helm-resume-existing))

    :init
    ;; Workaround for slow Helm issue with Emacs 26.1 on X.
    ;; See https://github.com/emacs-helm/helm/wiki/FAQ#slow-frame-and-window-popup-in-emacs-26
    (when (version= emacs-version "26.1")
      (setq x-wait-for-event-timeout nil))

    :custom
    (helm-grep-ag-command "rg --color=always --smart-case --no-heading --line-number %s %s %s"
                          "Use ripgrep instead of ag.")

    :config
    (defun my-helm-resume-existing ()
      "Resume previous helm session with prefix to choose among existing helm buffers."
      (interactive)
      (helm-resume t))

    (helm-mode 1)

    (setq helm-buffer-max-length nil))
#+END_SRC

** Helm Org
#+BEGIN_SRC emacs-lisp
  (use-package helm-org
    :pin melpa-stable
    :after helm

    :config
    (evil-leader/set-key-for-mode 'org-mode "hs" 'helm-org-in-buffer-headings)

    (advice-add 'helm-org-in-buffer-headings
                :after
                (lambda ()
                  "Move selected line to top when helm exits successfully."
                  (when (= helm-exit-status 0)
                    (recenter-top-bottom 0)))))
#+END_SRC

* Projectile
Use [[https://github.com/bbatsov/projectile][Projectile]] for project interaction. Works really well with
Git repositories for quick navigation.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :if (> emacs-major-version 24)
    :pin melpa-stable
    :diminish projectile-mode
    :bind-keymap ("C-c p" . projectile-command-map)
    :bind (:map projectile-mode-map
                ("<f9>" . projectile-run-project)
                ("C-<f9>" . projectile-compile-project)
                ("M-<f9>" . projectile-test-project)
                ("C-M-<f9>" . projectile-configure-project))

    :custom
    (projectile-globally-ignored-files '("TAGS" "GTAGS" "GRTAGS" "*.png" "*.ini" "*.dll" "*.lib" "*.bmp" "*.jpg"))

    (projectile-indexing-method 'hybrid)
    (projectile-enable-caching t)
    (projectile-use-git-grep t)

    :init
    (add-hook 'prog-mode-hook 'projectile-mode)

    :config
    (projectile-mode 1))
#+END_SRC

* Ripgrep
  Add ripgrep package for use with =M-x projectile-ripgrep=.
  Helm-projectile-ripgrep is available in melpa, but not yet in melpa-stable.
#+BEGIN_SRC emacs-lisp
  (use-package ripgrep
    :defer t
    :custom
    (ripgrep-arguments '("--smart-case")))
#+END_SRC

* Helm-projectile
[[https://github.com/bbatsov/helm-projectile][Combine]] Helm and Projectile for awesome project navigation with awesome
completion.
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :if (> emacs-major-version 24)
    :pin melpa-stable
    :after dash helm projectile
    :bind
    (:map projectile-command-map
          ("f" . helm-projectile-find-file)
          ("p" . helm-projectile-switch-project)
          ("sr" . my-helm-projectile-rg)
          :map evil-leader--default-map
          ("pp"  . helm-projectile-switch-project)
          ("pf"  . helm-projectile-find-file)
          ("psg" . helm-projectile-grep)
          ("pa"  . helm-projectile-find-other-file))

    :custom
    (helm-projectile-fuzzy-match nil)
    (projectile-switch-project-action 'helm-projectile)

    :config
    (defun my-helm-projectile-rg ()
      "Perform `helm-do-grep-ag' at project root.

    See also `helm-grep-ag-command'. (We use ripgrep)"
      (interactive)
      (projectile-with-default-dir (projectile-ensure-project (projectile-project-root))
        (call-interactively #'helm-do-grep-ag)))

    (helm-projectile-on))
#+END_SRC

* Org mode
[[https://orgmode.org/][Org-mode]] is, for me, a compelling reason to use Emacs. At the very
least, it is useful for note taking and managing work using TODO
lists. More recently, I have also started using org-mode to keep track
of time spent on individual tasks, in addition to simply keeping track
of the total amount of time spent at work during a day, which I have
been doing for some years now.

The ~(my-org-clock-in)~ function is used for keeping track of time spent at
work.
#+BEGIN_SRC emacs-lisp
  ;; Org html export requires htmlize.
  (use-package htmlize
    :pin melpa-stable
    :defer t)

  (use-package org
    :pin gnu
    ;; Global key bindings.
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c i" . my-org-clock-in)
           ("C-c j" . my-org-clock-goto)
           ("C-c o" . org-clock-out)
           ("C-c t" . my-org-todo-list)

           :map org-mode-map
           ([remap org-edit-special] . my-org-edit-special)
           ([remap org-insert-structure-template] . my-org-insert-structure-template)

           :map outline-mode-map
           ([tab] . org-cycle)
           ("<S-iso-leftab>" . org-shifttab)
           ("S-<tab>" . org-shifttab)
           ("<backtab>" . org-shifttab)
           ("M-p" . org-previous-visible-heading)
           ("M-n" . org-next-visible-heading))

    :custom
    (org-directory "~/org/")

    (org-todo-keywords '((sequence "TODO" "IN PROGRESS" "REVIEW" "DONE" )))

    (org-agenda-files (concat org-directory "org-agenda-files.org")
                      "Set org-agenda-files to file with list containing all agenda files.")

    (org-clock-clocktable-default-properties
     '(:maxlevel 3 :scope agenda :fileskip0 t :block yesterday :narrow 120!))

    (org-duration-format '((special . h:mm))
                         "Show total amount of hours and minutes, instead of formatting as \"d hh:mm\".")

    (org-clock-display-default-range 'untilnow
                                     "When using using org-clock-display, display the total time for subtrees.")

    (org-refile-targets '((org-agenda-files :maxlevel . 3))
                        "Set all agenda files as refile targets.")

    (org-refile-use-outline-path 'file
                                 "Enable refiling to the top level of an org file.")

    (org-export-with-sub-superscripts nil
                                      "Do not interpret "_" and "^" for sub and superscript when exporting.")

    (org-outline-path-complete-in-steps nil
                                        "Don't complete in steps, works well with narrowing frameworks such as Helm.")

    (org-clock-persist 'clock
                       "Save the running clock when Emacs exits.")

    (org-tags-column -100 "Flushright tags to column 100.")

    :init
    (add-hook 'org-mode-hook #'auto-fill-mode)

    :config
    (setq org-default-notes-file (concat org-directory "notes.org"))

    (org-clock-persistence-insinuate)

    ;; When in org-mode, use expected org-mode tab behaviour when in
    ;; Normal and Insert state. Set jump keys to navigate org links and
    ;; the mark ring.
    (evil-define-key 'normal org-mode-map
      [tab] 'org-cycle
      (kbd "C-]") 'org-open-at-point
      (kbd "C-o") 'org-mark-ring-goto)

    (evil-define-key 'insert org-mode-map [tab] 'org-cycle)

    (defun my-org-ws-cleanup ()
      "Clean up whitespace before saving a buffer.
  Calls `whitespace-cleanup' when the major-mode is `org-mode'."
      (when (eq major-mode 'org-mode) (whitespace-cleanup)))

    (add-hook 'before-save-hook #'my-org-ws-cleanup)

    (defun my-org-insert-structure-template ()
      "Like `org-insert-structure-template', but upcase all org block structures in current buffer."
      (interactive)
      (call-interactively #'org-insert-structure-template)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "#\\+\\(begin\\|end\\)_[[:alnum:]]+" nil t)
          (replace-match (upcase (match-string 0))))))

    (defun my-org-todo-list ()
      "Show org-todo-list with \"IN PROGRESS\" keyword selected."
      (interactive)
      (org-todo-list "IN PROGRESS"))

    (defun my-org-edit-special (&optional arg)
      "Edit source block below current window when calling `org-edit-special'.

  When editing a source block and more than one window is open
  `org-src-window-setup' is set to `current-window'. Otherwise,
  the default value is used."
      (interactive)
      (let ((org-src-window-setup
             (if (> (length (window-list)) 1)
                 'current-window
               org-src-window-setup)))
        (call-interactively 'org-edit-special)))

    (defcustom my-org-worklog (concat org-directory "worklog.org")
      "Org file for logging daily work time."
      :type 'file
      :group 'work)

    (defun my-org-clock-report ()
      "Show time spent on tasks during previous day.
  Create new buffer *clocktable.org* and call org-clock-report. With the custom
  values set in `org-clock-clocktable-default-properties', this is useful to get
  an overview of time spent on tasks during the previous workday.

  If the current day is Monday, generate a report of last friday
  and include the weekend."
      (interactive)
      (switch-to-buffer "*clocktable*")
      (org-mode)

      (let ((org-clock-clocktable-default-properties
             (if (= 1 (calendar-day-of-week (calendar-current-date)))
                 '(:maxlevel 3 :scope agenda :fileskip0 t :tstart "<-3d>" :tend "<today>" :narrow 120!)
               org-clock-clocktable-default-properties)))
        (org-clock-report)))

    (defun my-org-clock-goto ()
      "Go to recently clocked tasks by offering a selection.
  Calls `org-clock-goto' with prefix arg SELECT set to t."
      (interactive)
      (org-clock-goto t))

    (defun my-org-clock-in ()
      "Visit the file `my-org-worklog' and clock in.

  The file is created if it does not exist.

  It is structured as an org mode date tree, the difference being
  the clock is started on the day heading instead of a subheading,
  which would be the case if the date tree was created using
  org-capture.

  See also Info node `(org)Using capture' and Info node
  `(org)Template elements'."
      (interactive)
      (find-file my-org-worklog)
      (org-datetree-find-iso-week-create (calendar-current-date))
      (org-clock-in)))
#+END_SRC

Add ox-gfm to enable exporting of org mode buffers to Github Flavored Markdown.
#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :pin melpa-stable
    :defer 10
    :after ox)
#+END_SRC

* Magit
[[https://magit.vc/][Magit]] is another (alongside org-mode) compelling reason to use Emacs. Seriously,
it is the best keyboard driven Git interface I know of. It also integrates very
nicely into Emacs. Interactive rebasing, cherry-picking or running git blame on
a single file are a breeze with Magit.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :if (> emacs-major-version 24)
    :pin melpa-stable
    :defer t
    :bind (("C-x g" . magit-staging)
           :map evil-leader--default-map
           ("sg" . magit-staging)
           ("f"  . magit-file-popup))

    :custom
    (vc-handled-backends (delq 'Git vc-handled-backends)
                         "Disable VC git backend. No need when using Magit.")

    (magit-refresh-verbose t)

    (auto-revert-buffer-list-filter 'magit-auto-revert-repository-buffer-p)

    :init
    (evil-set-initial-state 'magit-staging-mode 'emacs)

    :config
    ;; Don't show tags when displaying refs.
    (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)

    ;; Don't show diff when committing (use C-c C-d to show diff anyway).
    (remove-hook 'server-switch-hook 'magit-commit-diff)

    ;; Improve staging performance on Windows.
    ;; See https://github.com/magit/magit/issues/2395
    (define-derived-mode magit-staging-mode magit-status-mode "Magit staging"
      "Stripped down mode for looking at Git status.
  Compared to `magit-status-mode', only untracked files and
  unstaged and staged changes are listed."
      :group 'magit-status)

    (defun magit-staging-refresh-buffer ()
      (magit-insert-section (status)
        (magit-insert-untracked-files)
        (magit-insert-unstaged-changes)
        (magit-insert-staged-changes)))

    (defun magit-staging (&optional directory)
      "Depending on OS, use `magit-status-mode' or `magit-staging-mode'.
  The former is the default Magit interface. However, on Windows
  systems Git is annoyingly slow, so instead use the latter as a
  stripped down version for better performance."
      (interactive)
      (let ((default-directory (or directory default-directory)))
        (if (eq system-type 'windows-nt)
            (magit-mode-setup #'magit-staging-mode)
          (magit-mode-setup #'magit-status-mode))))

    (magit-define-popup-switch 'magit-log-popup ?f "first parent" "--first-parent")

    (define-key git-commit-mode-map (kbd "C-c t") 'my-insert-current-date)

    (evil-define-key 'normal magit-blame-mode-map (kbd "q") 'magit-blame-quit))
#+END_SRC

Also install major modes for editing various git configuration files. See
[[https://github.com/magit/git-modes]].
#+BEGIN_SRC emacs-lisp
  (use-package gitattributes-mode
    :pin melpa-stable
    :defer t)
  (use-package gitconfig-mode
    :pin melpa-stable
    :defer t)
  (use-package gitignore-mode
    :pin melpa-stable
    :defer t)
#+END_SRC

* CMake mode
Make sure [[https://gitlab.kitware.com/cmake/cmake/blob/master/Auxiliary/cmake-mode.el][cmake-mode]] is installed. Useful for syntax highlighting of cmake files
and for the integrated help.
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :pin melpa-stable
    :bind (:map cmake-mode-map
                ("<f1>" . cmake-help))

    :defer t)
#+END_SRC

* Ninja mode
Syntax highlighting for ninja build files.
#+BEGIN_SRC emacs-lisp
  (use-package ninja-mode
    :pin melpa-stable
    :defer t)
#+END_SRC

* GTAGS / GNU Global
Set [[https://www.gnu.org/software/global/][GNU Global]] environment variables and ensure conf-mode is used for .globalrc
files.
#+BEGIN_SRC emacs-lisp
  ;; Force treating of .h files as C++ source.
  (setenv "GTAGSFORCECPP" "true")

  (add-to-list 'auto-mode-alist '("\\.globalrc\\'" . conf-mode))

  (use-package ggtags
    :pin melpa-stable
    :defer t)
#+END_SRC

* Helm gtags
Set up [[https://github.com/syohex/emacs-helm-gtags][helm-gtags]], a Helm interface to GNU Global.
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :pin melpa-stable
    :defer t
    :diminish helm-gtags-mode

    :custom
    (helm-gtags-path-style 'absolute)
    (helm-gtags-use-input-at-cursor t)
    (helm-gtags-auto-update t)
    (helm-gtags-pulse-at-cursor t)

    :init
    (add-hook 'c-mode-hook   'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)

    (evil-define-key 'normal c-mode-map   (kbd "C-]") 'helm-gtags-dwim)
    (evil-define-key 'normal c++-mode-map (kbd "C-]") 'helm-gtags-dwim)

    (advice-add #'helm-gtags-dwim :before #'evil-set-jump))
#+END_SRC

* Company
Set up and use [[http://company-mode.github.io/][Company]] as the text completion framework.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :pin melpa-stable
    :diminish company-mode
    :defer t

    :custom
    (company-dabbrev-downcase nil "Do not downcase returned candidates.")
    (company-dabbrev-ignore-case t "Ignore case for completion.")
    (company-dabbrev-code-ignore-case t "Ignore case for completion.")
    (company-async-timeout 10)
    (company-idle-delay nil)

    :init
    (add-hook 'prog-mode-hook 'company-mode)

    :config
    ;; Ensure semantic is not used as a company backend.
    (setq company-backends (delete 'company-semantic company-backends))

    ;; Ensure clang is not used as a company backend when it is not available.
    (unless (executable-find "clang")
      (setq company-backends (delete 'company-clang company-backends))))
#+END_SRC

* Helm company
Set up [[https://github.com/Sodel-the-Vociferous/helm-company][helm-company]], a Helm interface to Company.
#+BEGIN_SRC emacs-lisp
  (use-package helm-company
    :pin melpa-stable
    :after company

    :custom
    (helm-company-fuzzy-match nil)

    :config
    (evil-define-key 'insert prog-mode-map (kbd "TAB") 'helm-company))
#+END_SRC

* Semantic

#+BEGIN_SRC emacs-lisp
  (use-package semantic
    :defer t

    :init
    (add-hook 'c-mode-hook          'semantic-mode)
    (add-hook 'c++-mode-hook        'semantic-mode)

    :config
    (global-semantic-stickyfunc-mode)

    (advice-add #'semantic-ia-fast-jump :before #'evil-set-jump)

    (evil-define-key 'normal c++-mode-map (kbd "C-}") 'semantic-ia-fast-jump))
#+END_SRC

* Git for Windows path
Try and determine if Git is available. If it is, and we are on a Windows system,
also add =git-path/../usr/bin= to =exec-path=, to enable use of =diff=, =gpg=
and other tools. This way adding =git-path/../usr/bin= to the system PATH
environment variable can be avoided, which is probably not what you want on a
Windows system. If a Git executable cannot be found a message is displayed.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (let* ((git-exe (executable-find "git"))
           (git-path (concat (file-name-directory git-exe) "../usr/bin")))
      (if git-exe
          (progn
            ;; On Windows installations the git binaries reside in either bin or
            ;; cmd, so add usr/bin relative to the git executable path.
            (add-to-list 'exec-path git-path)
            (setenv "PATH" (concat (getenv "PATH") ";" git-path ";"))

            ;; Set the path to gpg.
            (use-package epg
              :defer t
              :custom
              (epg-gpg-program (concat git-path "/gpg"))))
        (message "Git not found, please update your PATH environment \
  variable to point to your Git installation."))))
#+END_SRC

* GPG
Ensure GnuPG password queries go through the minibuffer.
#+BEGIN_SRC emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+END_SRC

* Dired-narrow
Dired-narrow is a nice package to do quick filtering in dired buffers.
#+BEGIN_SRC emacs-lisp
  (use-package dired-narrow
    :if (> emacs-major-version 24)
    :after dired
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+END_SRC

* Hackernews
Emacs can do everything, so why not [[https://github.com/clarete/hackernews.el][browse]] [[https://news.ycombinator.com/news][hackernews]] with it?
#+BEGIN_SRC emacs-lisp
  (use-package hackernews
    :pin melpa-stable
    :defer t
    :init
    (evil-set-initial-state 'hackernews-mode 'emacs))
#+END_SRC

* Rainbow-delimiters
Set up [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters-mode]] for =prog-mode=. Most (if not all) programming
major modes are derived from =prog-mode=.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :pin melpa-stable
    :defer t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

* Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :pin melpa-stable
    :defer t)

  (use-package markdown-toc
    :pin melpa-stable
    :defer t)
#+END_SRC

* JSON mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :pin melpa-stable
    :defer t)
#+END_SRC
