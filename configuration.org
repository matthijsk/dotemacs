#+TITLE: Emacs Configuration

* Emacs settings
** Packages and use-package
This configuration file is loaded using ~(org-babel-load-file)~. To ensure
org-mode is properly initialized before loading this file ~package-archives~
settings and the call to ~(package-initialize)~ are done in [[file:init.el][init.el]].

Packages are installed and configured using ~use-package~.

** Diminish
[[https://github.com/myrjola/diminish.el][Diminish]] can be used as part of =use-package= to hide minor mode strings from
the modeline.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :pin melpa-stable)
#+END_SRC

** General settings
General Emacs settings relating to fonts, themes, keybindings, etc.

Set default coding system.
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC

Disable automatic backups. See
http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

Display the scratch buffer when starting up.
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice t)
#+END_SRC

Start Emacs as server for emacsclient processes.
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

Ask for confirmation when leaving Emacs.
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

Allow for basic paging in emacs shells.
#+BEGIN_SRC emacs-lisp
  (setenv "PAGER" "/bin/cat")
#+END_SRC

Increase warning limit to 100 MB for large files.
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold (* 100 1024 1024))
#+END_SRC

Fix slow redisplay when certain special characters are on screen.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-compacting-font-caches t)
#+END_SRC

Set fill-column to 80 characters. Use ~setq-default~ because fill-column becomes
buffer-local when set.
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC

Also end sentences with a period and a single space. This affects filling and
various commands such as ~(backward-sentence)~ and ~(forward-sentence)~.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Scrolling
Settings related to scrolling buffers.

Provide some context by have the cursor offset from the top and the bottom of
the buffer by three lines.
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 3)
#+END_SRC

Scroll by one line when reaching bottom of buffer instead of recentering the
buffer.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively most-positive-fixnum)
#+END_SRC

Don't scroll faster when the mouse wheel is turned faster. Also, use a fixed
scroll amount of three lines.
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-scroll-amount (quote (3 ((shift) . 1) ((control)))))
#+END_SRC

** User interface
Set the Consolas font when running on Windows.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (let ((my-font "-outline-Consolas-normal-normal-normal-mono-*-*-*-*-c-*-iso8859-1"))
      (set-face-attribute 'default nil :font my-font)
      (set-frame-font my-font nil t)))
#+END_SRC

Set the [[https://github.com/nashamri/spacemacs-theme][spacemacs]] theme when a graphical display is available. Pretty neat.
#+BEGIN_SRC emacs-lisp
  (defvar my-current-theme 'spacemacs-dark
    "Currently enabled theme.")

  (when (display-graphic-p)
    (use-package spacemacs-common
      :ensure spacemacs-theme

      :custom
      (spacemacs-theme-org-bold t)
      (spacemacs-theme-org-height nil)

      :config
      ;; Load both light and dark themes, but don't enable yet.
      (load-theme 'spacemacs-light t t)
      (load-theme 'spacemacs-dark t t)

      (enable-theme my-current-theme)

      (defun my-toggle-theme ()
        "Toggle between light and dark (spacemacs) themes"
        (interactive)
        (disable-theme my-current-theme)
        (setq my-current-theme (if (eq my-current-theme 'spacemacs-dark)
                                   'spacemacs-light
                                 'spacemacs-dark))
        (enable-theme my-current-theme))))
#+END_SRC

Disable the tool bar, the menu bar and the scroll bars.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (when (featurep 'scroll-bar)
    (set-scroll-bar-mode nil))
#+END_SRC

Default to displaying line numbers as relative.
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
#+END_SRC

Display time as 24h.
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
#+END_SRC

Use a visible bell.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

Don't blink the cursor.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** Key bindings
Reload ('revert') a buffer with =F5= without asking for confirmation, and
preserve all modes.
#+BEGIN_SRC emacs-lisp
  (defun my-revert-buffer ()
    "Revert a buffer without asking for confirmation and preserve all modes."
    (interactive)
    (revert-buffer nil t t))

  (global-set-key (kbd "<f5>") 'my-revert-buffer)
#+END_SRC

Load alternate file with =F6= (useful for switching .c and .h).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>") 'ff-find-other-file)
#+END_SRC

Exhibit expected X clipboard behaviour (yank with middle mouse button).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<mouse-2>") 'x-clipboard-yank)
  (setq-default x-select-enable-primary t)
#+END_SRC

Bind mouse buttons to Info-mode and help-mode navigation.
#+BEGIN_SRC emacs-lisp
  (require 'info)
  (define-key Info-mode-map (kbd "<mouse-4>") 'Info-history-back)
  (define-key Info-mode-map (kbd "<mouse-5>") 'Info-history-forward)
  (define-key Info-mode-map (kbd "<mouse-8>") 'Info-history-back)
  (define-key Info-mode-map (kbd "<mouse-9>") 'Info-history-forward)

  (require 'help-mode)
  (define-key help-mode-map (kbd "<mouse-4>") 'help-go-back)
  (define-key help-mode-map (kbd "<mouse-5>") 'help-go-forward)
  (define-key help-mode-map (kbd "<mouse-8>") 'help-go-back)
  (define-key help-mode-map (kbd "<mouse-9>") 'help-go-forward)
#+END_SRC

Disable =C-h h=, which is bound to ~view-hello-file~. I sometimes press this
accidentally. As opening the HELLO file takes long enough to be annoying disable
this binding here.
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-h h"))
#+END_SRC

Some sane bindings for making and deleting frames (an Emacs 'frame' is a
'window' in modern terms). =C-x 5 2= and =C-x 5 0= are just...too much. So
instead use =C-c n= for a new frame and =C-c x= (and =M-<f4>=) to delete the
frame.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c n") 'make-frame-command)

  (global-set-key (kbd "C-c x") 'delete-frame)
  (global-set-key (kbd "M-<f4>") 'delete-frame)
#+END_SRC

When I call kill-buffer I pretty much always mean to kill the current
buffer. The default functionality is to prompt for a buffer name. Instead, I
want the buffer to be killed immediately. Inspiration:
http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/.
#+BEGIN_SRC emacs-lisp
  (defun my-kill-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'my-kill-buffer)
#+END_SRC

Bind =hippie-expand= to =M-/=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

** Enable disabled commands
Some commands are disabled by default, enable these so Emacs doesn't
ask for confirmation every time the command is executed.

Allow narrowing.
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

Allow upcasing and lowercasing of regions.
#+BEGIN_SRC emacs-lisp
  (put 'upcase-region   'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

** Programming settings
Settings for setting up a programming environment.

Enable eldoc-mode for elisp buffers.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

Highlight matching parentheses.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Customize comment-dwim so it does exactly what I want it to do:
- If a region is active, comment it if not commented or uncomment if commented.
- Otherwise, comment or uncomment the current line and move to the next line.
Seriously, Emacs is awesome. I love this kind of customization power.
#+BEGIN_SRC emacs-lisp
  (defun my-comment-dwim (arg)
    "Call the comment command you want (Do What I Mean).
  If the region is active and `transient-mark-mode' is on, call
  `comment-region' (unless it only consists of comments, in which
  case it calls `uncomment-region').  Else, it calls
  `comment-line'.  Custom implementation derived from
  `comment-dwim'. The difference is that the original function
  appends a comment to a line while this function comments the
  line itself."
    (interactive "*P")
    (comment-normalize-vars)
    (if (use-region-p)
        (comment-or-uncomment-region (region-beginning) (region-end) arg)
      (comment-line 1)))
#+END_SRC

Autoscroll compilation window and stop on first error.
#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC

Set c and sh indentation to 2, and never indent with tabs.
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 2)

  (setq-default indent-tabs-mode nil)

  (setq sh-basic-offset 2)
#+END_SRC

Set some modes for specific file types.
- Set ~xml-mode~ when loading =cbproj= and =groupproj= files.
- Set ~c++-mode~ when loading =.rc= and =.rh= files.
- Set ~c++-mode~ when loading =.h= files. All I do is c++ all day.
- Set ~conf-mode~ when loading a Doxygen configuration file.
- Set ~conf-mode~ when loading a .clang-format file.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cbproj\\'" . xml-mode))
  (add-to-list 'auto-mode-alist '("\\.groupproj\\'" . xml-mode))

  (add-to-list 'auto-mode-alist '("\\.rh\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.rc\\'" . c++-mode))

  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

  (add-to-list 'auto-mode-alist '("Doxyfile\\'" . conf-mode))

  (add-to-list 'auto-mode-alist '("\\.clang-format\\'" . conf-mode))
#+END_SRC

Highlight TODO keywords in all programming modes using the =org-todo=
face.
#+BEGIN_SRC emacs-lisp
  (defun my-prog-mode-todo-font-lock ()
    "Font lock for \"TODO\" strings in prog-mode major modes.
  Sets face to `org-todo'."
    (font-lock-add-keywords nil
                            '(("\\<\\(TODO\\).*:" 1 'org-todo prepend))))

  (add-hook 'prog-mode-hook 'my-prog-mode-todo-font-lock)
#+END_SRC

** Default search function
Just a wrapper around whatever search function strikes my fancy
today. This makes it easier to change functionality without the tedium
of having to rebind all keys.
#+BEGIN_SRC emacs-lisp
  (defun my-search ()
    (interactive)
    ;; (swiper-helm (word-at-point)))
    ;; (swiper))
    (helm-occur))
    ;; (helm-swoop))

  (global-set-key (kbd "C-s") 'my-search)
#+END_SRC

** Find configuration files
This configuration file is written in =org-mode=. The file is
tangled into an =.el= file using an ~(org-babel-load-file)~ call in
=init.el= when Emacs starts.

These functions enable quick access to the configuration file and the
Emacs init file.
#+BEGIN_SRC emacs-lisp
  (defun my-find-configuration-file ()
    "Opens the configuration file in a new buffer.
  Opens the configuration file that is loaded by
  `user-init-file'. Use `my-find-init-file' to open
  `user-init-file'."
    (interactive)
    (find-file (concat user-emacs-directory "configuration.org")))

  (defun my-find-init-file ()
    "Opens `user-init-file' in a new buffer."
    (interactive)
    (find-file user-init-file))
#+END_SRC

** Spell check
Use hunspell as spell checker if it is available. Neato. Also enable flyspell
for text mode.
#+BEGIN_SRC emacs-lisp
  (when (executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-really-hunspell t)
    (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

** IBuffer
Remap =C-x C-b= to ~ibuffer~ instead of the default.

Use a human-readable Size column for =ibuffer=. Taken from [[https://www.emacswiki.org/emacs/IbufferMode#toc12][Emacs Wiki]].
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :bind (("C-x C-b" . ibuffer))
    :config
    ;; Use human readable Size column instead of original one.
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    ;; Modify the default ibuffer-formats.
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 18 18 :left :elide)
                  " "
                  (size-h 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  filename-and-process))))
#+END_SRC

** Ediff
Always split windows horizontally when running ediff. This is more comfortable
to me on modern screens.

Also ensure org-mode buffers are fully expanded.
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-merge-split-window-function 'split-window-horizontally)

  (add-hook 'ediff-prepare-buffer-hook '(lambda ()
                                          (when (eq major-mode 'org-mode)
                                            (org-show-all))))
#+END_SRC

Press =d= to copy both A and B into C. Useful when the changes of both sides in
a conflict are needed. Taken from
[[https://stackoverflow.com/questions/9656311/conflict-resolution-with-emacs-ediff-how-can-i-take-the-changes-of-both-version]].
#+begin_src emacs-lisp
  (defun my-ediff-copy-both-to-C ()
    "Copy both A and B into C."
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))

  (defun my-add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'my-ediff-copy-both-to-C))
  (add-hook 'ediff-keymap-setup-hook 'my-add-d-to-ediff-mode-map)
#+end_src

** Eww
Set eww (shr) frame width.
#+BEGIN_SRC emacs-lisp
  (setq shr-width 80)
#+END_SRC

** Eshell
Initialize and set up eshell completion.
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda ()
                                (eshell-cmpl-initialize)
                                (setq eshell-cmpl-cycle-completions nil)))
#+END_SRC

** Dired
Use human-readable sizes in dired listings.
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

** Convenience
Various functions to make editing more convenient.

Convenience function to open an OS native explorer window for the currently
visited file. Yes, I am aware of dired. Sometimes you still need explorer.
#+begin_src emacs-lisp
  (defun browse-file-directory ()
    "Open the current file's directory however the OS would."
    (interactive)
    (if default-directory
        (browse-url-of-file (expand-file-name default-directory))
      (error "No `default-directory' to open")))
#+end_src

** Auth sources
Only ever use encrypted .authinfo.gpg files.
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
#+end_src

** Man
#+begin_src emacs-lisp
  (setenv "MANWIDTH" "80")
#+end_src

* Default text scale
By default, scaling in Emacs (using =text-scale-adjust=) only scales
the text in the buffer, but not in the modeline or the
mini-buffer. The package [[https://github.com/purcell/default-text-scale][default-text-scale]] enables Emacs-wide
scaling.
#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :pin melpa-stable
    :bind (("C-M-="       . default-text-scale-increase)
           ("C-<mouse-4>" . default-text-scale-increase)
           ("C-M--"       . default-text-scale-decrease)
           ("C-<mouse-5>" . default-text-scale-decrease)))
#+END_SRC

* Evil
I used to be a Vim user. To be honest, I guess I still am. Else why
commit the sacrilege of using Vim bindings in Emacs? The modal editing
model of Vim works really well for me, and [[https://github.com/emacs-evil/evil][Evil]] is hands down the best
Vim emulator for Emacs. This gives me the best of both worlds: the
modal editing of Vim combined with the extensibility of Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :pin melpa-stable
    :demand t
    :diminish undo-tree-mode
    :bind (:map evil-normal-state-map
                ("C-s"     . save-buffer)
                ("C-/"     . my-comment-dwim)
                ("C-f"     . my-search)

           :map evil-motion-state-map
                ("C-f" . my-search)

           :map evil-insert-state-map
                ("C-s" . save-buffer))
    :init
    ;; Disable C-i when on a terminal (to enable use of <TAB> in org-mode with
    ;; evil-mode).
    (unless (display-graphic-p)
      (setq evil-want-C-i-jump nil))
    (setq evil-want-C-u-scroll t)
    (setq evil-symbol-word-search t)
    (setq evil-shift-width 2)
    (setq evil-move-beyond-eol t)

    :config
    ;; Ensure the yank register (on Windows, at least) is not overwritten when
    ;; performing a visual selection.
    ;; See https://emacs.stackexchange.com/questions/9344/pasting-in-evil-mode-when-theres-an-active-selection-copies-the-selection
    (fset 'evil-visual-update-x-selection 'ignore)

    (evil-define-key 'motion Man-mode-map (kbd "RET") 'man-follow)

    ;; Jump to tag and recenter.
    (advice-add 'evil-jump-to-tag     :after 'evil-scroll-line-to-center)
    (advice-add 'evil-jump-backward   :after 'evil-scroll-line-to-center)
    (advice-add 'evil-jump-forward    :after 'evil-scroll-line-to-center)
    (advice-add 'evil-search-next     :after 'evil-scroll-line-to-center)
    (advice-add 'evil-search-previous :after 'evil-scroll-line-to-center)

    ;; Ex commands.
    (evil-ex-define-cmd "A"  'ff-find-other-file)
    (evil-ex-define-cmd "ls" 'ibuffer)

    ;; Ensure Emacs bindings for RET and SPC are available in motion state.
    ;; https://www.emacswiki.org/emacs/Evil#toc12
    (defun my-move-key (keymap-from keymap-to key)
      "Moves key binding from one keymap to another, deleting from the old location. "
      (define-key keymap-to key (lookup-key keymap-from key))
      (define-key keymap-from key nil))
    (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
    (my-move-key evil-motion-state-map evil-normal-state-map " ")

    ;; Set custom evil state when in these modes.
    (add-hook 'with-editor-mode-hook 'evil-normal-state)

    (evil-set-initial-state 'shell-mode            'emacs)
    (evil-set-initial-state 'eshell-mode           'emacs)
    (evil-set-initial-state 'image-mode            'emacs)
    (evil-set-initial-state 'dired-mode            'emacs)
    (evil-set-initial-state 'profiler-report-mode  'emacs)
    (evil-set-initial-state 'messages-buffer-mode  'motion)
    (evil-set-initial-state 'eww-mode              'motion)
    (evil-set-initial-state 'eww-buffers-mode      'motion)
    (evil-set-initial-state 'elisp-refs-mode       'motion))
#+END_SRC

* Evil-leader
Configure [[https://github.com/cofi/evil-leader][evil-leader]] for leader keys with Evil.
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :pin melpa-stable
    :after evil

    :config
    (evil-leader/set-leader ",")
    (evil-leader/set-key "e"   'my-find-configuration-file
                         "i"   'my-find-init-file

                          "sh"  'eshell

                          "wc"  'evil-window-delete
                          "x0"  'delete-window

                          "ww"  'evil-window-next
                          "xo"  'other-window

                          "wo"  'delete-other-windows
                          "x1"  'delete-other-windows

                          "ws"  'evil-window-split
                          "x2"  'split-window-below

                          "wv"  'evil-window-vsplit
                          "x3"  'split-window-right

                          "wh"  'evil-window-left
                          "wj"  'evil-window-down
                          "wk"  'evil-window-up
                          "wl"  'evil-window-right

                          "xk"  'my-kill-buffer
                          "rb"  'revert-buffer
                          "x#"  'server-edit
                          "n"   'server-edit
                          "xc"  'save-buffers-kill-terminal

                          "l"   'whitespace-mode
                          "hl"  'hl-line-mode
                          "rl"  'display-line-numbers-mode

                          "xd"  'dired

                          "m"   'compile
                          "c"   'compile)

    ;; Enable evil leader.
    (global-evil-leader-mode)

    ;; Start evil.
    (evil-mode))
#+END_SRC

* Dash
Ensure [[https://github.com/magnars/dash.el][dash]] ("A modern list library for Emacs") is installed. It is used by many
packages.
#+BEGIN_SRC emacs-lisp
  (use-package dash
    :pin melpa-stable)
#+END_SRC

* Helm
Use [[https://emacs-helm.github.io/helm/][Helm]] for completion and narrowing.
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :pin melpa-stable
    :bind (("M-x"     . helm-M-x)
           ("C-x b"   . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-x C-h" . my-helm-resume-existing)
           ("C-x r l" . helm-bookmarks)

           :map helm-map ;; Use <C-tab> and <C-S-tab> to navigate helm buffers.
           ("<C-tab>"   . helm-next-line)
           ("<C-S-tab>" . helm-previous-line)

           :map evil-normal-state-map
           ("<SPC>" . helm-mini)

           :map evil-leader--default-map
           ("b"  . helm-mini)
           ("xf" . helm-find-files)
           ("hb" . helm-bookmarks)
           ("hs" . helm-semantic-or-imenu)
           ("xh" . my-helm-resume-existing))

    :config
    (defun my-helm-resume-existing ()
      "Resume previous helm session with prefix to choose among existing helm buffers."
      (interactive)
      (helm-resume t))

    (helm-mode 1)

    (setq helm-buffer-max-length nil)

    (add-hook 'eshell-mode-hook (lambda ()
                                  (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)))

    (evil-leader/set-key-for-mode 'org-mode "hs" 'helm-org-in-buffer-headings)

    (advice-add 'helm-org-in-buffer-headings
                :after
                (lambda ()
                  "Move selected line to top when helm exits successfully."
                  (when (= helm-exit-status 0)
                    (recenter-top-bottom 0)))))
#+END_SRC

* Projectile
Use [[https://github.com/bbatsov/projectile][Projectile]] for project interaction. Works really well with
Git repositories for quick navigation.
#+BEGIN_SRC emacs-lisp
  (when (> emacs-major-version 24)
    (use-package projectile
      :pin melpa-stable
      :diminish projectile-mode
      :bind-keymap ("C-c p" . projectile-command-map)
      :bind (:map projectile-mode-map
                  ("<f9>" . projectile-run-project)
                  ("C-<f9>" . projectile-compile-project)
                  ("M-<f9>" . projectile-test-project))

      :init
      (add-hook 'c-mode-hook     'projectile-mode)
      (add-hook 'c++-mode-hook   'projectile-mode)
      (add-hook 'cmake-mode-hook 'projectile-mode)

      :config
      (projectile-mode 1)

      (setq projectile-globally-ignored-files '("TAGS" "GTAGS" "GRTAGS"))

      (setq projectile-indexing-method 'hybrid)
      (setq projectile-enable-caching t)
      (setq projectile-use-git-grep t)))
#+END_SRC

* Helm-projectile
[[https://github.com/bbatsov/helm-projectile][Combine]] Helm and Projectile for awesome project navigation with awesome
completion.
#+BEGIN_SRC emacs-lisp
  (when (> emacs-major-version 24)
    (use-package helm-projectile
      :pin melpa-stable
      :after dash helm projectile
      :bind
      (:map projectile-command-map
            ("f" . helm-projectile-find-file)
            ("p" . helm-projectile-switch-project)
            :map evil-leader--default-map
            ("pf"  . helm-projectile-find-file)
            ("psg" . helm-projectile-grep)
            ("pa"  . helm-projectile-find-other-file))

      :init
      (setq helm-projectile-fuzzy-match nil)
      (setq projectile-switch-project-action 'helm-projectile)

      :config
      (helm-projectile-on)))
#+END_SRC

* Outline-magic
The package [[https://github.com/tj64/outline-magic][outline-magic]] provides ~(outline-cycle)~, which functions similar to
~(org-cycle)~. This is useful for the odd occasion when I run into an
outline-mode buffer.
#+begin_src emacs-lisp
  (when (> emacs-major-version 24)
    (use-package outline-magic
      :bind (:map outline-mode-map
                  ([tab] . outline-cycle))))
#+end_src

* Org mode
[[https://orgmode.org/][Org-mode]] is, for me, a compelling reason to use Emacs. At the very
least, it is useful for note taking and managing work using TODO
lists. More recently, I have also started using org-mode to keep track
of time spent on individual tasks, in addition to simply keeping track
of the total amount of time spent at work during a day, which I have
been doing for some years now.

The ~(my-clock-in)~ and ~(my-clock-in-monday)~ functions are used for
keeping track of time spent at work.
#+BEGIN_SRC emacs-lisp
  ;; Org html export requires htmlize.
  (use-package htmlize
    :pin melpa-stable
    :defer t)

  (use-package org
    :pin gnu
    ;; Global key bindings.
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-switchb)
           ("C-c i" . my-org-clock-in)
           ("C-c j" . my-org-clock-goto)
           ("C-c o" . org-clock-out)
           :map org-mode-map
           ("C-c '" . my-org-edit-special)
           ("M-p"   . org-previous-visible-heading)
           ("M-n"   . org-next-visible-heading))
    :init
    (setq org-todo-keywords
          '((sequence "TODO" "IN PROGRESS" "REVIEW" "DONE" )))

    ;; Don't use the user home directory on Windows systems, as Emacs defaults to
    ;; using AppData/Roaming for $HOME. Otherwise, just use the default (~/org).
    (when (eq system-type 'windows-nt)
      (setq org-directory (format "c:/Users/%s/org" user-login-name)))

    (setq org-default-notes-file (concat org-directory "/notes.org"))

    ;; Set org-agenda-files to file with list containing all agenda files.
    (setq org-agenda-files (concat org-directory "/org-agenda-files.org"))

    :config
    (org-clock-persistence-insinuate)

    (setq org-clock-clocktable-default-properties
          '(:maxlevel 3 :scope agenda :fileskip0 t :block yesterday :narrow 120!))

    ;; Show total amount of hours and minutes, instead of formatting as "d hh:mm".
    (setq org-duration-format '((special . h:mm)))

    ;; Set all agenda files as refile targets.
    (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))

    ;; Enable refiling to the top level of an org file.
    (setq org-refile-use-outline-path 'file)

    ;; Org mode babel language support.
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (C . t)))

    ;; Do not interpret "_" and "^" for sub and superscript when
    ;; exporting.
    (setq org-export-with-sub-superscripts nil)

    ;; When in org-mode, use expected org-mode tab behaviour when in
    ;; Normal and Insert state. Set jump keys to navigate org links and
    ;; the mark ring.
    (evil-define-key 'normal org-mode-map
      [tab] 'org-cycle
      (kbd "C-]") 'org-open-at-point
      (kbd "C-o") 'org-mark-ring-goto)

    (evil-define-key 'insert org-mode-map [tab] 'org-cycle)

    ;; Don't complete in steps, works well with narrowing frameworks such as Helm.
    (setq org-outline-path-complete-in-steps nil)

    ;; Save the running clock when Emacs exits.
    (setq org-clock-persist 'clock)

    ;; Flushright tags to column 100.
    (setq org-tags-column -100)

    (defun my-org-edit-special (&optional arg)
      "Edit source block below current window when calling `org-edit-special'.

  When editing a source block and more than one window is open
  `org-src-window-setup' is set to 'split-window-below'. Otherwise,
  the default value is used."
      (interactive)
      (let ((org-src-window-setup
             (if (> (length (window-list)) 1)
                 'split-window-below
               org-src-window-setup)))
        (call-interactively 'org-edit-special)))

    (defcustom my-org-worklog (concat org-directory "/worklog.org")
      "File for logging daily work time."
      :type 'file)

    (defun my-org-clock-goto ()
      "Go to recently clocked tasks by offering a selection."
      (interactive)
      (org-clock-goto t))

    (defun my-org-clock-in ()
      "Visit the file `my-org-worklog' and clock in.

  The file is created if it does not exist.

  It is structured as an org mode date tree, the difference being
  the clock is started on the day heading instead of a subheading,
  which would be the case if the date tree was created using
  org-capture.

  See also Info node `(org)Using capture' and Info node
  `(org)Template elements'."
      (interactive)
      (find-file my-org-worklog)
      (org-datetree-find-iso-week-create (calendar-current-date))
      (org-clock-in)))
#+END_SRC

* Magit
[[https://magit.vc/][Magit]] is another (alongside org-mode) compelling reason to use Emacs. Seriously,
it is the best keyboard driven Git interface I know of. It also integrates very
nicely into Emacs. Interactive rebasing, cherry-picking or running git blame on
a single file are a breeze with Magit.
#+BEGIN_SRC emacs-lisp
  (when (> emacs-major-version 24)
    (use-package magit
      :pin melpa-stable
      :defer t
      :bind (("C-x g" . magit-staging)
             :map evil-leader--default-map
             ("sg" . magit-staging)
             ("f"  . magit-file-popup))

      :init
      ;; Disable VC git backend. No need when using Magit.
      (setq vc-handled-backends (delq 'Git vc-handled-backends))
      (evil-set-initial-state 'magit-staging-mode 'emacs)

      :config
      ;; Don't show tags when displaying refs.
      (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)

      ;; Don't show diff when committing (use C-c C-d to show diff anyway).
      (remove-hook 'server-switch-hook 'magit-commit-diff)

      ;; Improve staging performance on Windows.
      ;; See https://github.com/magit/magit/issues/2395
      (define-derived-mode magit-staging-mode magit-status-mode "Magit staging"
        "Mode for showing staged and unstaged changes."
        :group 'magit-status)

      (defun magit-staging-refresh-buffer ()
        (magit-insert-section (status)
                              (magit-insert-untracked-files)
                              (magit-insert-unstaged-changes)
                              (magit-insert-staged-changes)))

      (defun magit-staging ()
        (interactive)
        (magit-mode-setup #'magit-staging-mode))

      (magit-define-popup-switch 'magit-log-popup ?f "first parent" "--first-parent")

      (evil-define-key 'normal magit-blame-mode-map (kbd "q") 'magit-blame-quit)

      (setq magit-refresh-verbose t)

      (setq auto-revert-buffer-list-filter 'magit-auto-revert-repository-buffer-p)))
#+END_SRC

Also install major modes for editing various git configuration files. See
[[https://github.com/magit/git-modes]].
#+BEGIN_SRC emacs-lisp
  (use-package gitattributes-mode
      :pin melpa-stable)
  (use-package gitconfig-mode
      :pin melpa-stable)
  (use-package gitignore-mode
      :pin melpa-stable)
#+END_SRC

* CMake mode
Make sure [[https://gitlab.kitware.com/cmake/cmake/blob/master/Auxiliary/cmake-mode.el][cmake-mode]] is installed. Useful for syntax highlighting of cmake files
and for the integrated help.
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :defer t)
#+END_SRC

* Ninja mode
Syntax highlighting for ninja build files.
#+BEGIN_SRC emacs-lisp
  (use-package ninja-mode
    :pin melpa-stable
    :defer t)
#+END_SRC

* GTAGS / GNU Global
Set [[https://www.gnu.org/software/global/][GNU Global]] environment variables and ensure conf-mode is used for .globalrc
files.
#+BEGIN_SRC emacs-lisp
  ;; Force treating of .h files as C++ source.
  (setenv "GTAGSFORCECPP" "true")

  (add-to-list 'auto-mode-alist '("\\.globalrc\\'" . conf-mode))

  (use-package ggtags
    :pin melpa-stable)
#+END_SRC

* Helm gtags
Set up [[https://github.com/syohex/emacs-helm-gtags][helm-gtags]], a Helm interface to GNU Global.
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :pin melpa-stable
    :defer t
    :diminish helm-gtags-mode

    :init
    (add-hook 'c-mode-hook   'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)

    :config
    (setq helm-gtags-path-style 'absolute)
    (setq helm-gtags-use-input-at-cursor t)
    (setq helm-gtags-auto-update t)
    (setq helm-gtags-pulse-at-cursor t)

    (evil-define-key 'normal c-mode-map   (kbd "C-]") 'helm-gtags-dwim)
    (evil-define-key 'normal c++-mode-map (kbd "C-]") 'helm-gtags-dwim)

    (advice-add 'helm-gtags-dwim :before 'evil--jumps-push))
#+END_SRC

* Company
Set up and use [[http://company-mode.github.io/][Company]] as the text completion framework.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :pin melpa-stable
    :diminish company-mode
    :defer t

    :init
    (add-hook 'c-mode-hook          'company-mode)
    (add-hook 'c++-mode-hook        'company-mode)
    (add-hook 'emacs-lisp-mode-hook 'company-mode)
    (add-hook 'cmake-mode-hook      'company-mode)
    :config
    (setq company-backends (delete 'company-semantic company-backends)) ;; Ensure semantic is not used by company.
    (setq company-dabbrev-downcase nil) ;; Do not downcase returned candidates.
    (setq company-dabbrev-ignore-case t) ;; Ignore case for completion.
    (setq company-dabbrev-code-ignore-case t) ;; Ignore case for completion.
    (setq company-async-timeout 10)
    (setq company-idle-delay nil))
#+END_SRC

* Helm company
Set up [[https://github.com/Sodel-the-Vociferous/helm-company][helm-company]], a Helm interface to Company.
#+BEGIN_SRC emacs-lisp
  (use-package helm-company
   :after company

   :config
   (evil-define-key 'insert c-mode-map                (kbd "TAB") 'helm-company)
   (evil-define-key 'insert c++-mode-map              (kbd "TAB") 'helm-company)
   (evil-define-key 'insert emacs-lisp-mode-map       (kbd "TAB") 'helm-company)
   (evil-define-key 'insert lisp-interaction-mode-map (kbd "TAB") 'helm-company)
   (setq helm-company-fuzzy-match nil))
#+END_SRC

* Semantic

#+BEGIN_SRC emacs-lisp
  (use-package semantic
    :defer t

    :init
    (add-hook 'c-mode-hook          'semantic-mode)
    (add-hook 'c++-mode-hook        'semantic-mode)

    :config
    (global-semantic-stickyfunc-mode)

    (defun my-semantic-ia-fast-jump ()
      "Saves current position in evil jump list, then calls `semantic-ia-fast-jump'."
      (interactive)
      (evil--jumps-push)
      (semantic-ia-fast-jump (point)))

    (evil-define-key 'normal c++-mode-map (kbd "C-}") 'my-semantic-ia-fast-jump))
#+END_SRC

* Git for Windows path
Try and determine if Git is available. If it is, and we are on a Windows system,
also add =git-path/../usr/bin= to =exec-path=, to enable use of =diff=, =gpg=
and other tools. This way adding =git-path/../usr/bin= to the system PATH
environment variable can be avoided, which is probably not what you want on a
Windows system. If a Git executable cannot be found a message is displayed.

Also ensure ~conf-unix-mode~ is used for various git configuration files.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (let* ((git-exe (executable-find "git"))
           (git-path (concat (file-name-directory git-exe) "../usr/bin")))
      (if git-exe
          (progn
            ;; On Windows installations the git binaries reside in either bin or
            ;; cmd, so add usr/bin relative to the git executable path.
            (add-to-list 'exec-path git-path)
            (setenv "PATH" (concat (getenv "PATH") ";" git-path ";")))
        (message "Git not found, please update your PATH environment \
  variable to point to your Git installation."))))
#+END_SRC

* GPG
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
#+end_src

* Dired-narrow
Dired-narrow is a nice package to do quick filtering in dired buffers.
#+BEGIN_SRC emacs-lisp
  (when (> emacs-major-version 24)
    (use-package dired-narrow
      :after dired
      :bind (:map dired-mode-map
                  ("/" . dired-narrow))))
#+END_SRC

* Hackernews
Emacs can do everything, so why not [[https://github.com/clarete/hackernews.el][browse]] [[https://news.ycombinator.com/news][hackernews]] with it?
#+BEGIN_SRC emacs-lisp
  (use-package hackernews
    :pin melpa-stable
    :defer t
    :init
    (evil-set-initial-state 'hackernews-mode 'emacs))
#+END_SRC

* Rainbow-delimiters
Set up [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters-mode]] for prog-modes.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :pin melpa-stable
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

* Markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :pin melpa-stable)
#+end_src
