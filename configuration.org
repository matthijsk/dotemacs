#+TITLE: Emacs Configuration

* Emacs settings
** Packages and use-package
This configuration file is loaded using ~(org-babel-load-file)~. To ensure
org-mode is properly initialized before loading this file ~package-archives~
settings and the call to ~(package-initialize)~ are done in [[file:init.el][init.el]].

Packages are installed and configured using [[https://github.com/jwiegley/use-package][use-package]].

** International
Set language environment, input method and default coding system.
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (setq default-input-method "iso-transl")
  (setq default-transient-input-method default-input-method)
  (set-default-coding-systems 'utf-8)
#+end_src

** General settings
General Emacs settings that don't fall under any specific category.

Disable automatic backups. See
http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html.
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

Start Emacs as server for emacsclient processes.
#+begin_src emacs-lisp
  (server-start)
#+end_src

Ask for confirmation when leaving Emacs.
#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'yes-or-no-p)
#+end_src

Allow for basic paging in emacs shells.
#+begin_src emacs-lisp
  (setenv "PAGER" "/bin/cat")
#+end_src

Increase warning limit to 100 MB for large files.
#+begin_src emacs-lisp
  (setq large-file-warning-threshold (* 100 1024 1024))
#+end_src

Fix slow redisplay on Windows for Emacsen older than 27 when certain special
characters are on screen. Since 27, this value defaults to ~t~ for Windows.
#+begin_src emacs-lisp
  (when (and (eq system-type 'windows-nt) (< emacs-major-version 27))
    (setq inhibit-compacting-font-caches t))
#+end_src

Use native image API on Windows systems.
#+begin_src emacs-lisp
  (setq w32-use-native-image-API t)
#+end_src

Set fill-column to 80 characters. Use ~setq-default~ because fill-column becomes
buffer-local when set.
#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src

Also end sentences with a period and a single space. This affects filling and
various commands such as ~(backward-sentence)~ and ~(forward-sentence)~.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

Delete duplicates from history.
#+begin_src emacs-lisp
  (setq history-delete-duplicates t)
#+end_src

Ensure ffap doesn't try to be helpful by interpreting some filenames as domain
names and then pinging them. All this achieves is Emacs blocking until the ping
command returns with a failure. Reference
https://github.com/emacs-helm/helm/issues/648
#+begin_src emacs-lisp
  (setq ffap-machine-p-known 'reject)
#+end_src

** Scrolling
Settings related to scrolling buffers.

Provide some context by have the cursor offset from the top and the bottom of
the buffer by three lines.
#+begin_src emacs-lisp
  (setq scroll-margin 3)
#+end_src

Scroll by one line when reaching bottom of buffer instead of recentering the
buffer.
#+begin_src emacs-lisp
  (setq scroll-conservatively most-positive-fixnum)
#+end_src

Don't scroll faster when the mouse wheel is turned faster. Also, use a fixed
scroll amount of three lines.
#+begin_src emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-scroll-amount (quote (3 ((shift) . hscroll))))
#+end_src

** User interface
General Emacs settings relating to fonts, themes, etc.

*** Font
Set the Consolas font when running on Windows.

Add optional args to enable advising ~default-text-scale-increment~, which is
the only purpose of this function, really. If ~set-frame-font~ is not called
after ~default-text-scale~ any new frame created after the initial frame will
use the default instead of the customized font.
#+begin_src emacs-lisp
  (defun my-set-font (&optional args)
    "Set desired font depending on current OS."
    (when (eq system-type 'windows-nt)
      (set-frame-font "Consolas" nil t)))

  (my-set-font)
#+end_src

*** Theme
Load [[https://github.com/nashamri/spacemacs-theme][spacemacs]] theme. When running ssh from a MINGW terminal, make sure it is
set to =xterm-256color= (under =options -> terminal=).
#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :ensure spacemacs-theme

    :config
    (setq spacemacs-theme-org-bold t)
    (setq spacemacs-theme-org-height nil)

    (load-theme 'spacemacs-dark t))
#+end_src

*** Miscellaneous
Disable the tool bar, the menu bar and the scroll bars.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (when (featurep 'scroll-bar)
    (set-scroll-bar-mode nil))
#+end_src

Default to displaying line numbers as relative.
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
#+end_src

Display time as 24h.
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
#+end_src

Use a visible bell.
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

Don't blink the cursor.
#+begin_src emacs-lisp
  (blink-cursor-mode 0)                   ; Graphical displays
  (setq visible-cursor nil)               ; Text terminal
#+end_src

** Global key bindings
Set global key bindings, not related to any specific packages.

Reload ('revert') a buffer with =F5= without asking for confirmation, and
preserve all modes.
#+begin_src emacs-lisp
  (defun my-revert-buffer ()
    "Revert a buffer without asking for confirmation and preserve all modes.
  See also `revert-buffer'."
    (interactive)
    (revert-buffer nil t t))

  (bind-key "<f5>" #'my-revert-buffer)
#+end_src

Load alternate file with =F6= (useful for switching .c and .h).
#+begin_src emacs-lisp
  (bind-key "<f6>" #'ff-find-other-file)
#+end_src

Exhibit expected X clipboard behaviour (yank with middle mouse button).
#+begin_src emacs-lisp
  (bind-key "<mouse-2>" #'clipboard-yank)
  (setq-default select-enable-primary t)
#+end_src

Define OS independent events for mouse forward and back buttons. Inspired by the
mouse wheel events defined in =mwheel.el=.
#+begin_src emacs-lisp
  (defvar my-mouse-back-event
    (if (or (featurep 'w32-win) (featurep 'ns-win))
        "<mouse-4>"
      "<mouse-8>")
    "Event used for mouse back.")

  (defvar my-mouse-forward-event
    (if (or (featurep 'w32-win) (featurep 'ns-win))
        "<mouse-5>"
      "<mouse-9>")
    "Event used for mouse forward.")
#+end_src

Bind mouse buttons to Info-mode and help-mode navigation.
#+begin_src emacs-lisp
  (eval-after-load 'info
    '(progn
       (bind-key my-mouse-back-event #'Info-history-back Info-mode-map)
       (bind-key my-mouse-forward-event #'Info-history-forward Info-mode-map)))

  (eval-after-load 'help
    '(progn
       (bind-key my-mouse-back-event #'help-go-back help-mode-map)
       (bind-key my-mouse-forward-event #'help-go-forward help-mode-map)))
#+end_src

Disable =C-h h=, which is bound to ~view-hello-file~. I sometimes press this
accidentally. As opening the HELLO file takes long enough to be annoying disable
this binding here.
#+begin_src emacs-lisp
  (unbind-key "C-h h")
#+end_src

Some sane bindings for making and deleting frames (an Emacs 'frame' is a
'window' in modern terms). =C-x 5 2= and =C-x 5 0= are just...too much. So
instead use =C-c n= for a new frame and =C-c x= (and =M-<f4>=) to delete the
frame.
#+begin_src emacs-lisp
  (bind-key "C-c n" #'make-frame-command)

  (bind-key "C-c x" #'delete-frame)
  (bind-key "M-<f4>" #'delete-frame)
#+end_src

When I call kill-buffer I pretty much always mean to kill the current buffer.
The default functionality is to prompt for a buffer name. Instead, I want the
current buffer to be killed immediately.
#+begin_src emacs-lisp
  (bind-key "C-x k" #'kill-current-buffer)
#+end_src

Bind ~describe-char~ instead of ~describe-key-briefly~ to =C-h c=. I often use
the former, but never the latter.
#+begin_src emacs-lisp
  (bind-key "C-h c" #'describe-char)
#+end_src

** Enable disabled commands
Some commands are disabled by default, enable these so Emacs doesn't
ask for confirmation every time the command is executed.

Allow narrowing.
#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+end_src

Allow upcasing and lowercasing of regions.
#+begin_src emacs-lisp
  (put 'upcase-region   'disabled nil)
  (put 'downcase-region 'disabled nil)
#+end_src

** Programming settings
Settings for setting up a programming environment.

Enable eldoc-mode for elisp buffers.
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+end_src

Highlight matching parentheses.
#+begin_src emacs-lisp
  (show-paren-mode t)
#+end_src

Customize comment-dwim so it does exactly what I want it to do:
- If a region is active, comment it if not commented or uncomment if commented.
- Otherwise, comment or uncomment the current line and move to the next line.
Seriously, Emacs is awesome. I love this kind of customization power.
#+begin_src emacs-lisp
  (defun my-comment-dwim (arg)
    "Call the comment command you want (Do What I Mean).
  If the region is active and `transient-mark-mode' is on, call
  `comment-region' (unless it only consists of comments, in which
  case it calls `uncomment-region').  Else, it calls
  `comment-line'.  Custom implementation derived from
  `comment-dwim'. The difference is that the original function
  appends a comment to a line while this function comments the
  line itself."
    (interactive "*P")
    (comment-normalize-vars)
    (if (use-region-p)
        (comment-or-uncomment-region (region-beginning) (region-end) arg)
      (comment-line 1)))
#+end_src

Autoscroll compilation window and stop on first error.
#+begin_src emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+end_src

Set c and sh indentation to 2, and never indent with tabs.
#+begin_src emacs-lisp
  (use-package cc-mode
    :defer t
    :config
    (setq c-basic-offset 2))

  (use-package sh-script
    :defer t
    :config
    (setq sh-basic-offset 2))

  (setq-default indent-tabs-mode nil)
#+end_src

Set some modes for specific file types.
- Set ~xml-mode~ when loading =cbproj= and =groupproj= files.
- Set ~c++-mode~ when loading =.rc= and =.rh= files.
- Set ~conf-mode~ when loading a Doxygen configuration file.
- Set ~conf-mode~ when loading a .clang-format file.
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Doxyfile\\'" . conf-mode))

  (add-to-list 'auto-mode-alist '("\\.clang-format\\'" . conf-mode))
#+end_src

Highlight =TODO= keywords in all programming modes using a special face.
#+begin_src emacs-lisp
  (defun my-prog-mode-todo-font-lock ()
    "Font lock for \"TODO\" strings in prog-mode major modes.
  Sets face to face `font-lock-warning-face'."
    (font-lock-add-keywords nil
                            '(("\\<\\(TODO\\).*:" 1 'font-lock-warning-face prepend))))

  (add-hook 'prog-mode-hook 'my-prog-mode-todo-font-lock)
#+end_src

Define a function that searches http://www.cppreference.com for the symbol at
point.
#+begin_src emacs-lisp
  (defun my-cppref-lookup (arg)
    "Search cppreference.com for ARG, using `browse-url'."
    (interactive (list (read-string "Search cppref: " (thing-at-point 'symbol t))))
    (browse-url
     (format "https://en.cppreference.com/mwiki/index.php?title=Special%%3ASearch&search=%s"
             arg)))
#+end_src

Define key bindings that need to be set after =c-mode= is loaded. Bind
~next-error~ and ~previous-error~ to the easily accessible =M-n= and =M-p= in C
and C++ mode, respectively. Also bind =F1= to a C/C++ specific help lookup
function.
#+begin_src emacs-lisp
  (defun my-c-mode-bindings ()
    "Custom `c-mode' bindings."
    (bind-key "M-n" #'next-error c-mode-base-map)
    (bind-key "M-p" #'previous-error c-mode-base-map)
    (bind-key "<f1>" #'my-cppref-lookup c-mode-base-map))

  (add-hook 'c-mode-common-hook #'my-c-mode-bindings)
#+end_src

Set up a global binding to quickly switch to the compilation buffer.
#+begin_src emacs-lisp
  (defun my-switch-to-compilation ()
    "Switch to *compilation* buffer."
    (interactive)
    (switch-to-buffer "*compilation*"))

  (bind-key "C-c b" #'my-switch-to-compilation)
#+end_src

Set up ~bat-cmd-help~ with ~thing-at-point~ for =bat-mode=.
#+begin_src emacs-lisp
  (use-package bat-mode
    :defer t
    :bind (:map bat-mode-map
                ("<f1>" . my-bat-cmd-help))

    :config
    (defun my-bat-cmd-help (cmd)
      "Show help for batch file command CMD."
      (interactive (list (read-string "Help for command: " (thing-at-point 'symbol t))))
      (bat-cmd-help cmd)))
#+end_src

Set ~python-shell-unbuffered~ to ~nil~ to prevent =Warning (python): Python
shell prompts cannot be detected.= warnings when opening a python file on
Windows systems. See https://github.com/jorgenschaefer/elpy/issues/733.
#+begin_src emacs-lisp
  (setq python-shell-unbuffered nil)
#+end_src

** Default occur function
Define an alias for whatever occur-like function strikes my fancy today. This makes
it easier to change functionality without the tedium of having to rebind all
keys.
#+begin_src emacs-lisp
  (bind-key "M-s o" #'helm-occur)
#+end_src

** Find configuration files
This configuration file is written in =org-mode=. The file is
tangled into an =.el= file using an ~(org-babel-load-file)~ call in
=init.el= when Emacs starts.

These functions enable quick access to the configuration file and the
Emacs init file.
#+begin_src emacs-lisp
  (defun my-find-configuration-file ()
    "Opens user configuration file in a new buffer.

  The file `my-configuration-file' is loaded in `user-init-file'.
  Use `my-find-init-file' to open `user-init-file' instead."
    (interactive)
    (find-file my-configuration-file))

  (defun my-find-init-file ()
    "Opens `user-init-file' in a new buffer."
    (interactive)
    (find-file user-init-file))
#+end_src

** Spell check
Use ispell or hunspell as spell checker if available.
#+begin_src emacs-lisp
  (cond ((executable-find "ispell"))
        ((executable-find "hunspell")
         (setq ispell-program-name "hunspell")
         (setq ispell-really-hunspell t)))
#+end_src

** IBuffer
Remap ~list-buffers~ (=C-x C-b=) to ~ibuffer~.

Use a human-readable Size column for =ibuffer=. Taken from [[https://www.emacswiki.org/emacs/IbufferMode#toc12][Emacs Wiki]].
#+begin_src emacs-lisp
  (use-package ibuffer
    :bind (([remap list-buffers] . ibuffer))
    :config
    ;; Use human readable Size column instead of original one.
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (cond
       ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
       ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

    ;; Modify the default ibuffer-formats.
    (add-to-list 'ibuffer-formats
                 '(mark modified read-only " "
                        (name 18 18 :left :elide)
                        " "
                        (size-h 9 -1 :right)
                        " "
                        (mode 16 16 :left :elide)
                        " "
                        filename-and-process)))
#+end_src

** Ediff
Always split windows horizontally when running ediff. This is more comfortable
to me on modern high resolution screens.
#+begin_src emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-merge-split-window-function 'split-window-horizontally)
#+end_src

Ensure org-mode buffers are fully expanded.
#+begin_src emacs-lisp
  (add-hook 'ediff-prepare-buffer-hook (lambda ()
                                         "Ensure org-mode buffers are fully expanded."
                                         (when (eq major-mode 'org-mode)
                                           (org-show-all))))
#+end_src

Most GNU/Linux systems I use have no window manager installed (such as servers),
or a tiling window manager (for personal use). When ediff runs in a terminal,
the control frame is embedded in the current frame, instead of in a separate
frame. I would like the same behavior when Emacs runs in a tiling window
manager, as otherwise the floating control frame is immediately tiled by the
window manager and thus becomes disproportionately large (depending on how many
windows are already open).
#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

Press =d= to copy both A and B into C. Useful when the changes of both sides in
a conflict are needed. Taken from
[[https://stackoverflow.com/questions/9656311/conflict-resolution-with-emacs-ediff-how-can-i-take-the-changes-of-both-version]].
#+begin_src emacs-lisp
  (defun my-ediff-copy-both-to-C ()
    "Copy both A and B into C."
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))

  (defun my-add-d-to-ediff-mode-map () (bind-key "d" #'my-ediff-copy-both-to-C ediff-mode-map))
  (add-hook 'ediff-keymap-setup-hook 'my-add-d-to-ediff-mode-map)
#+end_src

** Eww
Set eww (shr) frame width.
#+begin_src emacs-lisp
  (setq shr-width 80)
#+end_src

** Eshell
Initialize and set up eshell completion.
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook (lambda ()
                                (eshell-cmpl-initialize)
                                (setq eshell-cmpl-cycle-completions nil)))
#+end_src

** Dired
Use human-readable sizes in dired listings.
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

Enable dired-find-alternate-file, to open the currently highlighted file and
kill the current dired buffer. Useful for browsing through large file trees.
Using dired-find-file (<RET>) results in many open dired buffers.
#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

** Convenience
Various functions to make editing more convenient.

Convenience function to open an OS native explorer window for the currently
visited file. Yes, I am aware of dired. Sometimes you still need explorer.
#+begin_src emacs-lisp
  (defun my-browse-file-directory ()
    "Browse `default-directory' using the default file manager."
    (interactive)
    (if default-directory
        (browse-url-of-file (expand-file-name default-directory))
      (error "No `default-directory' to open")))
#+end_src

Search https://woordenlijst.org for correct spelling and grammar of Dutch words
and sentences.
#+begin_src emacs-lisp
  (defun my-search-woordenlijst-org (word)
    "Search URL `https://woordenlijst.org' for WORD."
    (interactive (list (read-string "Search woordenlijst.org: " (thing-at-point 'word t))))
    (browse-url
     (format "https://woordenlijst.org/#/?q=%s" word)))

  (bind-key "<f2>" #'my-search-woordenlijst-org)
#+end_src

** Auth sources
Only ever use encrypted .authinfo.gpg files.
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
#+end_src

** Man
#+begin_src emacs-lisp
  (setenv "MANWIDTH" "80")
#+end_src

** Abbrev
Enable ~abbrev-mode~ for ~text-mode~.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'abbrev-mode)
#+end_src

** Calendar
Set up holidays that are commonly observed in my part of the world.

Also, add a function to insert the current date into the current buffer. Useful
for inserting the current date in a written form.
#+begin_src emacs-lisp
  (use-package calendar
    :commands (my-insert-current-date)

    :init
    ;; Set custom holidays before loading org mode and the calendar.
    (setq holiday-other-holidays '((holiday-fixed 4 27 "King's Day")
                                   (holiday-fixed 5 4 "Remembrance Day")
                                   (holiday-fixed 5 5 "Liberation Day")
                                   (holiday-easter-etc 1 "Easter Monday")
                                   (holiday-easter-etc 39 "Ascension Day") ; 39 days after Easter
                                   (holiday-easter-etc 49 "Whit Sunday")   ; 7th Sunday after Easter
                                   (holiday-easter-etc 50 "Whit Monday")
                                   (holiday-fixed 12 26 "Second day of Christmas")))
    (setq holiday-hebrew-holidays nil)
    (setq holiday-islamic-holidays nil)
    (setq holiday-bahai-holidays nil)
    (setq holiday-oriental-holidays nil)

    (setq calendar-latitude 52.2)
    (setq calendar-longitude 5.4)
    (setq calendar-location-name "Amersfoort")

    (setq calendar-time-display-form '(24-hours ":" minutes))

    :config
    (calendar-set-date-style 'european)

    (defun my-insert-current-date (&optional nodayname)
      "Insert today's date using the current locale.
  With a prefix argument, the date is inserted without the day of
  the week. See also `calendar-date-string'."
      (interactive "*P")
      (insert (calendar-date-string (calendar-current-date) nil
                                    nodayname))))
#+end_src

** Generic-x
   Generic modes for common file types. Comes bundled with Emacs.
   #+begin_src emacs-lisp
  (use-package generic-x
    :defer 5)
   #+end_src

** Subr-x
Ensure =subr-x= is loaded. Comes bundled with Emacs.

According to the documentation:
#+begin_quote
it's almost always correct to use ~(eval-when-compile (require 'subr-x))~
#+end_quote
However, the [[*Magit][Magit]] configuration block in this file defines some custom
functions (~(magit-staging)~) that also require =subr-x= but that, since this
configuration file is not byte compiled, will not work until this feature is
loaded.
#+begin_src emacs-lisp
  (use-package subr-x)
#+end_src

* Dash
Ensure [[https://github.com/magnars/dash.el][dash]] ("A modern list library for Emacs") is installed. It is used by many
packages.
#+begin_src emacs-lisp
  (use-package dash
    :ensure t
    :pin melpa-stable)
#+end_src

* Diminish
[[https://github.com/myrjola/diminish.el][Diminish]] can be used as part of =use-package= to hide minor mode strings from
the modeline.
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :pin melpa-stable)
#+end_src

* Default text scale
By default, scaling in Emacs (using =text-scale-adjust=) only scales
the text in the buffer, but not in the modeline or the
mini-buffer. The package [[https://github.com/purcell/default-text-scale][default-text-scale]] enables Emacs-wide
scaling.
#+begin_src emacs-lisp
  (use-package default-text-scale
    :pin melpa-stable
    :ensure t
    :if (display-graphic-p)
    :bind (("C-M-=" . default-text-scale-increase)
           ("C-M--" . default-text-scale-decrease))
    :init
    (advice-add 'default-text-scale-increment :after 'my-set-font)
    (bind-key (format "C-<%s>" mouse-wheel-down-event) #'default-text-scale-increase)
    (bind-key (format "C-<%s>" mouse-wheel-up-event) #'default-text-scale-decrease))
#+end_src

* Doom-modeline
Use [[https://github.com/seagle0128/doom-modeline][doom-modeline]] as the modeline. Looks good, while still having good
performance.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :pin melpa-stable
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-buffer-file-name-style 'relative-to-project))
#+end_src

* Evil
I used to be a Vim user. To be honest, I guess I still am. Else why
commit the sacrilege of using Vim bindings in Emacs? The modal editing
model of Vim works really well for me, and [[https://github.com/emacs-evil/evil][Evil]] is hands down the best
Vim emulator for Emacs. This gives me the best of both worlds: the
modal editing of Vim combined with the extensibility of Emacs.
#+begin_src emacs-lisp
  (use-package evil
    :pin melpa-stable
    :ensure t
    :demand t
    :bind (:map evil-normal-state-map
                ("C-s"     . save-buffer)
                ("C-/"     . my-comment-dwim)

           :map evil-insert-state-map
                ("C-s" . save-buffer)

           :map evil-ex-completion-map
                ("C-a" . move-beginning-of-line)
                ("C-e" . move-end-of-line)
                ("C-b" . backward-char)
                ("C-f" . forward-char))

    :init
    ;; Enable C-i when on a graphical display, and disable when on a terminal (to
    ;; enable use of <TAB> in org-mode with evil-mode).
    (setq evil-want-C-i-jump (display-graphic-p))
    (setq evil-want-C-u-scroll t)
    (setq evil-symbol-word-search t)
    (setq evil-shift-width 2)
    (setq evil-move-beyond-eol t)
    (setq evil-undo-system 'undo-redo)

    :config
    ;; Ensure the yank register (on Windows, at least) is not overwritten when
    ;; performing a visual selection.
    ;; See https://emacs.stackexchange.com/questions/9344/pasting-in-evil-mode-when-theres-an-active-selection-copies-the-selection
    (fset 'evil-visual-update-x-selection 'ignore)

    (evil-define-key 'motion Man-mode-map (kbd "RET") 'man-follow)
    (evil-define-key 'motion help-mode-map (kbd "TAB") 'forward-button)
    (evil-define-key 'motion help-mode-map (kbd "S-TAB") 'backward-button)

    ;; Undo remapping of yank-pop to evil-paste-pop. I like yank-pop.
    (define-key evil-normal-state-map [remap yank-pop] 'nil)

    ;; Jump to tag and recenter.
    (advice-add 'evil-jump-to-tag     :after 'evil-scroll-line-to-center)
    (advice-add 'evil-jump-backward   :after 'evil-scroll-line-to-center)
    (advice-add 'evil-jump-forward    :after 'evil-scroll-line-to-center)
    (advice-add 'evil-search-next     :after 'evil-scroll-line-to-center)
    (advice-add 'evil-search-previous :after 'evil-scroll-line-to-center)

    ;; Ensure Emacs bindings for RET and SPC are available in motion state.
    ;; https://www.emacswiki.org/emacs/Evil#toc12
    (defun my-move-key (keymap-from keymap-to key)
      "Moves key binding from one keymap to another, deleting from the old location."
      (define-key keymap-to key (lookup-key keymap-from key))
      (define-key keymap-from key nil))
    (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
    (my-move-key evil-motion-state-map evil-normal-state-map " ")

    ;; Set custom evil state when in these modes.
    (add-hook 'with-editor-mode-hook 'evil-normal-state)

    (dolist (mode '(calendar-mode
                    shell-mode
                    eshell-mode
                    eww-mode
                    term-mode
                    inferior-emacs-lisp-mode
                    image-mode
                    dired-mode
                    help-mode
                    Info-mode
                    compilation-mode
                    calculator-mode
                    semantic-symref-results-mode
                    shortdoc-mode
                    xref--xref-buffer-mode
                    flymake-diagnostics-buffer-mode
                    profiler-report-mode
                    epa-key-list-mode))
      (evil-set-initial-state mode 'emacs))

    (dolist (mode '(messages-buffer-mode
                    eww-mode
                    eww-buffers-mode
                    elisp-refs-mode))
      (evil-set-initial-state mode 'motion)))
#+end_src

* Evil-leader
Configure [[https://github.com/cofi/evil-leader][evil-leader]] for leader keys with Evil.
#+begin_src emacs-lisp
  (use-package evil-leader
    :pin melpa-stable
    :ensure t
    :after evil

    :config
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "e"   'my-find-configuration-file
      "i"   'my-find-init-file

      "sh"  'eshell

      "wc"  'evil-window-delete

      "ww"  'evil-window-next

      "wo"  'delete-other-windows

      "ws"  'evil-window-split

      "wv"  'evil-window-vsplit

      "wh"  'evil-window-left
      "wj"  'evil-window-down
      "wk"  'evil-window-up
      "wl"  'evil-window-right

      "xs"  'save-some-buffers
      "xk"  'kill-current-buffer
      "rb"  'revert-buffer
      "n"   'server-edit
      "xc"  'save-buffers-kill-terminal

      "l"   'whitespace-mode
      "hl"  'hl-line-mode
      "rl"  'display-line-numbers-mode

      "g"   'gnus

      "u"   'outline-up-heading

      "c"   'compile)

    (evil-leader/set-key-for-mode 'emacs-lisp-mode "c" 'emacs-lisp-byte-compile)

    ;; Enable evil leader.
    (global-evil-leader-mode)

    ;; Start evil.
    (evil-mode))
#+end_src

* Helm
Use [[https://emacs-helm.github.io/helm/][Helm]] for completion and narrowing.
#+begin_src emacs-lisp
  (use-package helm
    :pin melpa-stable
    :ensure t
    :defer t)

  ;; Load helm autoloads if it is installed.
  (when (package-installed-p 'helm)
    (require 'helm-config))

  (use-package helm-mode
    :diminish helm-mode
    :defer 2
    :bind (("C-c r" . my-helm-resume-existing)
           :map evil-leader--default-map
           ("hr" . my-helm-resume-existing))

    :init
    ;; Workaround for slow Helm issue with Emacs 26.1 on X.
    ;; See https://github.com/emacs-helm/helm/wiki/FAQ#slow-frame-and-window-popup-in-emacs-26
    (when (version= emacs-version "26.1")
      (setq x-wait-for-event-timeout nil))

    :config
    (defun my-helm-resume-existing ()
      "Resume previous helm session with prefix to choose among existing helm buffers."
      (interactive)
      (helm-resume t))

    (helm-mode 1))

  (use-package helm-command
    :bind (("M-x" . helm-M-x)))

  (use-package helm-files
    :diminish helm-ff-cache-mode
    :bind (("C-x C-f" . helm-find-files)
           :map evil-leader--default-map
           ("xf" . helm-find-files)))

  (use-package helm-bookmark
    :bind (("C-x r l" . helm-bookmarks)))

  (use-package helm-semantic
    :bind (:map evil-leader--default-map
           ("hs" . helm-semantic-or-imenu)))

  (use-package helm-buffers
    :bind (("C-x b" . helm-mini)
           :map evil-normal-state-map
           ("SPC" . helm-mini))

    :config
    (setq helm-buffer-max-length nil))

  (use-package helm-grep
    :defer t
    :config
    ;; Use ripgrep instead of ag.
    (setq helm-grep-ag-command "rg --color=always --smart-case --no-heading --line-number %s %s %s"))
#+end_src

* Helm Org
#+begin_src emacs-lisp
  (use-package helm-org
    :pin melpa-stable
    :ensure t
    :commands (helm-org-in-buffer-headings)

    :init
    (evil-leader/set-key-for-mode 'org-mode "hs" 'helm-org-in-buffer-headings)

    :config
    (advice-add 'helm-org-in-buffer-headings
                :after
                (lambda ()
                  "Move selected line to top when helm exits successfully."
                  (when (= helm-exit-status 0)
                    (recenter-top-bottom 0)))))
#+end_src

* Projectile
Use [[https://github.com/bbatsov/projectile][Projectile]] for project interaction. Works really well with
Git repositories for quick navigation.
#+begin_src emacs-lisp
  (use-package projectile
    :if (> emacs-major-version 24)
    :pin melpa-stable
    :ensure t
    :diminish projectile-mode
    :bind-keymap ("C-c p" . projectile-command-map)
    :bind (:map projectile-mode-map
                ("<f9>" . projectile-run-project)
                ("C-<f9>" . projectile-compile-project)
                ("M-<f9>" . projectile-test-project)
                ("C-M-<f9>" . projectile-configure-project)

                :map projectile-command-map
                ("R" . my-projectile-regenerate-tags)

                :map evil-leader--default-map
                ("pp"  . projectile-switch-project)
                ("pf"  . projectile-find-file)
                ("pa"  . projectile-find-other-file))

    :init
    (setq projectile-globally-ignored-files '("TAGS" "GTAGS" "GRTAGS" "*.png" "*.ini" "*.dll" "*.lib" "*.bmp" "*.jpg"))
    (setq projectile-indexing-method 'hybrid)
    (setq projectile-enable-caching t)
    (setq projectile-use-git-grep t)
    (setq projectile-auto-update-cache nil)
    (setq projectile-enable-cmake-presets t)

    :config
    (projectile-mode 1)

    (defun my-projectile-regenerate-tags ()
      "Runs GTAGS in root of project directory."
      (interactive)
      (projectile-with-default-dir (projectile-acquire-root)
        (compile "gtags -v"))))
#+end_src

* Helm-projectile
[[https://github.com/bbatsov/helm-projectile][Combine]] Helm and Projectile for awesome project navigation with awesome
completion.
#+begin_src emacs-lisp
  (use-package helm-projectile
    :if (> emacs-major-version 24)
    :pin melpa-stable
    :ensure t
    :bind-keymap ("C-c p" . projectile-command-map)
    :bind (:map projectile-command-map
                ("sr" . my-helm-projectile-rg)
                ("sg" . my-helm-projectile-grep)
                :map evil-leader--default-map
                ("psr" . my-helm-projectile-rg)
                ("psg" . my-helm-projectile-grep))

    :init
    (require 'tramp)
    (setq helm-projectile-fuzzy-match nil)
    (setq projectile-switch-project-action 'helm-projectile)
    (setq helm-projectile-git-grep-command "git --no-pager grep --no-color -n%c -e %p -- %f %g")

    :config
    (defun my-helm-projectile-grep ()
      "Call `helm-projectile-grep' non-interactively, to prevent the directory prompt."
      (interactive)
      (helm-projectile-grep))

    (defun my-helm-projectile-rg ()
      "Perform `helm-do-grep-ag' at project root.

  See also `helm-grep-ag-command'. (We use ripgrep)"
      (interactive)
      (projectile-with-default-dir (projectile-acquire-root)
        (call-interactively #'helm-do-grep-ag)))

    (add-hook 'helm-before-initialize-hook
              (lambda ()
                "Workaround for helm-projectile setting `helm-buffer-max-length'."
                (setq helm-buffer-max-length nil)))

    ;; Override `helm-projectile-switch-to-eshell' (in helm-projectile.el),
    ;; because the melpa-stable version tries to call `helm-ff-switch-to-eshell',
    ;; which is no longer available in stable helm. Call `helm-ff-switch-to-shell'
    ;; instead.
    (defun helm-projectile-switch-to-eshell (dir)
      (interactive)
      (let* ((projectile-require-project-root nil)
             (helm-ff-default-directory (file-name-directory (projectile-expand-root dir))))
        (helm-ff-switch-to-shell dir)))

    (helm-projectile-on))
#+end_src

* Org mode
[[https://orgmode.org/][Org-mode]] is, for me, a compelling reason to use Emacs. At the very
least, it is useful for note taking and managing work using TODO
lists. More recently, I have also started using org-mode to keep track
of time spent on individual tasks, in addition to simply keeping track
of the total amount of time spent at work during a day, which I have
been doing for some years now.

The ~(my-org-clock-in)~ function is used for keeping track of time spent at
work.
#+begin_src emacs-lisp
  ;; Org html export requires htmlize.
  (use-package htmlize
    :pin melpa-stable
    :defer t)

  (use-package org
    :pin gnu
    :ensure t
    ;; Global key bindings.
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c w" . my-org-start-day)
           ("C-c j" . my-org-clock-goto)
           ("C-c o" . my-org-clock-out)
           ("C-c t" . my-org-todo-list)
           ("C-c d" . my-org-daily-standup)

           :map org-mode-map
           ([remap org-clock-in] . my-org-clock-in)
           ([remap org-edit-special] . my-org-edit-special)

           :map outline-mode-map
           ([tab] . org-cycle)
           ("<S-iso-leftab>" . org-shifttab)
           ("S-<tab>" . org-shifttab)
           ("<backtab>" . org-shifttab)
           ("M-p" . org-previous-visible-heading)
           ("M-n" . org-next-visible-heading))

    :init
    (setq org-startup-folded t)

    (setq org-todo-keywords '((sequence "TODO" "IN PROGRESS" "REVIEW" "|" "DONE" "WONTFIX" )))

    (setq org-clock-clocktable-default-properties
          '(:maxlevel 3 :scope agenda :fileskip0 t :tstart "<-1d>" :tend "<today>" :narrow 120!))

    ;; Show total amount of hours and minutes, instead of formatting as "d hh:mm".
    (setq org-duration-format '((special . h:mm)))

    ;; When using using org-clock-display, display the total time for subtrees.
    (setq org-clock-display-default-range 'untilnow)

    ;; Set all agenda files as refile targets.
    (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))

    ;; Enable refiling to the top level of an org file.
    (setq org-refile-use-outline-path 'file)

    ;; Do not interpret "_" and "^" for sub and superscript when exporting.
    (setq org-export-with-sub-superscripts nil)

    ;; Don't complete in steps, works well with narrowing frameworks such as Helm.
    (setq org-outline-path-complete-in-steps nil)

    ;; Save the running clock when Emacs exits.
    (setq org-clock-persist 'clock)

    ;; Flushright tags to column 100.
    (setq org-tags-column -100)

    (add-hook 'org-mode-hook #'auto-fill-mode)
    (add-hook 'org-agenda-mode-hook #'hl-line-mode)

    (setq org-adapt-indentation t)

    (add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))

    (setq org-fold-show-context-detail
          '((agenda . tree)
            (bookmark-jump . lineage)
            (isearch . lineage)
            (default . tree)))

    :config
    (setq org-priority-default 65)

    (setq org-default-notes-file (concat (file-name-as-directory org-directory) "notes.org"))

    (setq org-agenda-use-time-grid nil)

    ;; Set org-agenda-files to file with list containing all agenda files.
    (setq org-agenda-files (concat (file-name-as-directory org-directory) "org-agenda-files.org"))

    ;; Ensure tags in agenda columns are shifted to the agenda item.
    (setq org-agenda-align-tags-to-column 0)

    (org-clock-persistence-insinuate)

    ;; When in org-mode, use expected org-mode tab behaviour when in
    ;; Normal and Insert state. Set jump keys to navigate org links and
    ;; the mark ring.
    (evil-define-key 'normal org-mode-map
      [tab] 'org-cycle
      (kbd "C-]") 'org-open-at-point
      (kbd "C-o") 'org-mark-ring-goto)

    (evil-define-key 'insert org-mode-map [tab] 'org-cycle)

    (defun my-org-ws-cleanup ()
      "Clean up whitespace before saving a buffer.
  Calls `whitespace-cleanup' when the major-mode is `org-mode'."
      (when (eq major-mode 'org-mode) (whitespace-cleanup)))

    (add-hook 'before-save-hook #'my-org-ws-cleanup)

    (defun my-org-todo-list ()
      "Show `org-todo-list' with \"IN PROGRESS\" keyword selected."
      (interactive)
      (org-todo-list "IN PROGRESS"))

    (defun my-org-edit-special (&optional arg)
      "Edit source block below current window when calling `org-edit-special'.

  When editing a source block and more than one window is open
  `org-src-window-setup' is set to `current-window'. Otherwise,
  the default value is used."
      (interactive)
      (let ((org-src-window-setup
             (if (> (length (window-list)) 1)
                 'current-window
               org-src-window-setup)))
        (call-interactively 'org-edit-special)))

    (defcustom my-org-worklog (concat (file-name-as-directory org-directory) "worklog.org")
      "Org file for logging daily work time."
      :type 'file
      :group 'work)

    (defun my-org-daily-standup ()
      "Clock in for daily stand-up and display clock table and agenda.

  Asks to clock in for the daily stand-up work item. Then displays
  the clocktable, the agenda and `my-org-worklog'."
      (interactive)
      (find-file (concat (file-name-as-directory org-directory) "agenda.org"))
      (when (message-y-or-n-p "Clock in for daily standup?" nil)
        (with-current-buffer "agenda.org"
          (goto-char (point-min))
          (when (re-search-forward "Daily stand-up")
            (goto-char (match-beginning 0))
            (org-clock-in)
            (save-buffer))))
      (delete-other-windows)
      (my-org-clock-report)
      (org-agenda-list)
      (other-window 1)
      (split-window-below)
      (switch-to-buffer-other-window "worklog.org"))

    (defun my-org-clock-report ()
      "Show time spent on tasks during previous day.
  Create new buffer *clocktable.org* and call `org-clock-report'.

  With the custom values set in
  `org-clock-clocktable-default-properties', this is useful to get
  an overview of time spent on tasks during the previous workday.

  If the current day is Monday, generate a report of last friday
  and include the weekend."
      (interactive)
      (switch-to-buffer "*clocktable*")
      (erase-buffer)
      (org-mode)
      (insert "To update the clock table after making changes in its properties run org-dblock-update (C-c C-x C-u).")

      (let ((org-clock-clocktable-default-properties
             (if (= 1 (calendar-day-of-week (calendar-current-date)))
                 '(:maxlevel 3 :scope agenda :fileskip0 t :tstart "<-3d>" :tend "<today>" :narrow 120!)
               org-clock-clocktable-default-properties)))
        (org-clock-report)))

    (defun my-org-clock-goto ()
      "Go to recently clocked tasks by offering a selection.
  Calls `org-clock-goto' with prefix arg SELECT set to t."
      (interactive)
      (org-clock-goto t))

    (defun my-org-start-day ()
      "Visit the file `my-org-worklog' and clock in.

  The file is created if it does not exist.

  It is structured as an org mode date tree, the difference being
  the clock is started on the day heading instead of a subheading,
  which would be the case if the date tree was created using
  org-capture.

  See also Info node `(org)Using capture' and Info node
  `(org)Template elements'."
      (interactive)
      (message "Clocking in...")
      (find-file my-org-worklog)
      (org-datetree-find-iso-week-create (calendar-current-date))
      (org-reveal)
      (org-show-entry)
      (org-clock-in)
      (org-save-all-org-buffers)
      (message "Clocking in...done"))

    (defun my-org-clock-in ()
      "Start the clock on the current item and save all org buffers.

  See `org-clock-in' and `org-save-all-org-buffers'"
      (interactive)
      (org-clock-in)
      (org-save-all-org-buffers))

    (defun my-org-clock-out ()
      "Stop the currently running clock and save all org buffers.

  See `org-clock-out' and `org-save-all-org-buffers'"
      (interactive)
      (org-clock-out)
      ;; We are interested in the clock out message, but org-save-all-org-buffers
      ;; also displays a message. Save the clock out message for display after
      ;; saving all buffers.
      (let ((clock-out-message (current-message)))
        (org-save-all-org-buffers)
        (message clock-out-message))))
#+end_src

Add ox-gfm to enable exporting of org mode buffers to Github Flavored Markdown.
#+begin_src emacs-lisp
  (use-package ox-gfm
    :pin melpa-stable
    :defer 10)
#+end_src

* Magit
[[https://magit.vc/][Magit]] is another (alongside org-mode) compelling reason to use Emacs. Seriously,
it is the best keyboard driven Git interface I know of. It also integrates very
nicely into Emacs. Interactive rebasing, cherry-picking or running git blame on
a single file are a breeze with Magit.
#+begin_src emacs-lisp
  (use-package magit
    :if (> emacs-major-version 24)
    :pin melpa-stable
    :ensure t
    :after subr-x
    :bind (("C-x g" . magit-staging)
           :map evil-leader--default-map
           ("sg" . magit-staging)
           ("f"  . magit-file-dispatch)
           :map git-commit-mode-map
           ("C-c t" . my-insert-current-date))

    :init
    ;; Disable VC git backend. No need when using Magit.
    (setq vc-handled-backends (delq 'Git vc-handled-backends))

    (setq magit-refresh-verbose nil)

    (setq auto-revert-buffer-list-filter 'magit-auto-revert-repository-buffer-p)

    (evil-set-initial-state 'magit-staging-mode 'emacs)

    :config
    (evil-define-key 'normal magit-blame-mode-map (kbd "q") 'magit-blame-quit)
    (evil-define-key 'normal magit-blame-mode-map (kbd "c") 'magit-blame-cycle-style)

    ;; Add author-headings blame style which is similar to the headings style but
    ;; displays author date instead of committer date.
    (add-to-list 'magit-blame-styles '(author-headings (heading-format . "%-20a %A %s\n")))

    ;; Don't show tags when displaying refs.
    (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)

    ;; Don't show diff when committing (use C-c C-d to show diff anyway).
    (remove-hook 'server-switch-hook 'magit-commit-diff)

    ;; Improve staging performance on Windows.
    ;; See https://github.com/magit/magit/issues/2395
    (define-derived-mode magit-staging-mode magit-status-mode "Magit staging"
      "Stripped down mode for looking at Git status.
  Compared to `magit-status-mode', only untracked files, unstaged
  and staged changes and recent commits are listed."
      :group 'magit-status)

    (defun magit-staging-refresh-buffer ()
      (magit-insert-section (status)
        (magit-insert-untracked-files)
        (magit-insert-unstaged-changes)
        (magit-insert-staged-changes)))

    (defun magit-staging (&optional directory)
      "Depending on OS, use `magit-status-mode' or `magit-staging-mode'.
  The former is the default Magit interface. However, on Windows
  systems Git is annoyingly slow, so instead use the latter as a
  stripped down version for better performance."
      (interactive)
      (let ((default-directory (or directory default-directory)))
        (if (eq system-type 'windows-nt)
            (magit-mode-setup #'magit-staging-mode)
          (magit-mode-setup #'magit-status-mode)))))
#+end_src

Also install major modes for editing various git configuration files. See
[[https://github.com/magit/git-modes]].
#+begin_src emacs-lisp
  (use-package gitattributes-mode
    :pin melpa-stable
    :ensure t
    :defer t)
  (use-package gitconfig-mode
    :pin melpa-stable
    :ensure t
    :defer t)
  (use-package gitignore-mode
    :pin melpa-stable
    :ensure t
    :defer t)
#+end_src

* CMake mode
Make sure [[https://gitlab.kitware.com/cmake/cmake/blob/master/Auxiliary/cmake-mode.el][cmake-mode]] is installed. Useful for syntax highlighting of cmake files
and for the integrated help.
#+begin_src emacs-lisp
  (use-package cmake-mode
    :pin melpa-stable
    :ensure t
    :bind (:map cmake-mode-map
                ("<f1>" . cmake-help-online))

    :defer t

    :init
    ;; CMake preset builds use the CMAKE_BUILD_PARALLEL_LEVEL environment variable
    ;; if the --parallel (-j) flag is not provided. Set to a value appropriate for
    ;; the current system.
    (setenv "CMAKE_BUILD_PARALLEL_LEVEL"
            (number-to-string (1- (string-to-number (getenv "NUMBER_OF_PROCESSORS")))))

    :config
    (defun cmake-help-online (arg)
      "Query cmake online documentation for ARG, using `browse-url'."
      (interactive (list (read-string "Search cmake docs: " (cmake-symbol-at-point))))
      (browse-url
       (format "https://cmake.org/cmake/help/latest/search.html?q=%s"
               arg))))
#+end_src

* Ninja mode
Syntax highlighting for ninja build files.
#+begin_src emacs-lisp
  (use-package ninja-mode
    :pin melpa-stable
    :ensure t
    :defer t)
#+end_src

* GTAGS / GNU Global
Set [[https://www.gnu.org/software/global/][GNU Global]] environment variables and ensure conf-mode is used for .globalrc
files.
#+begin_src emacs-lisp
  ;; Force treating of .h files as C++ source.
  (setenv "GTAGSFORCECPP" "true")

  (add-to-list 'auto-mode-alist '("\\.globalrc\\'" . conf-mode))
#+end_src

* Helm gtags
Set up [[https://github.com/syohex/emacs-helm-gtags][helm-gtags]], a Helm interface to GNU Global.
#+begin_src emacs-lisp
  (use-package helm-gtags
    :pin melpa-stable
    :ensure t
    :defer t
    :diminish helm-gtags-mode

    :init
    (add-hook 'c-mode-common-hook #'helm-gtags-mode)

    (evil-define-key 'normal c-mode-map (kbd "C-]") 'helm-gtags-dwim)
    (evil-define-key 'normal c++-mode-map (kbd "C-]") 'helm-gtags-dwim)

    (advice-add #'helm-gtags-dwim :before #'evil-set-jump)

    :config
    (setq helm-gtags-path-style 'absolute)
    (setq helm-gtags-use-input-at-cursor t)
    (setq helm-gtags-auto-update t)
    (setq helm-gtags-pulse-at-cursor t))

#+end_src

* Semantic

#+begin_src emacs-lisp
  (use-package semantic
    :defer t

    :init
    (add-hook 'c-mode-common-hook #'semantic-mode)

    :config
    (global-semantic-stickyfunc-mode t)
    (global-semanticdb-minor-mode t)

    (advice-add #'semantic-ia-fast-jump :before #'evil-set-jump)

    (evil-define-key 'normal c-mode-map (kbd "C-}") 'semantic-ia-fast-jump)
    (evil-define-key 'normal c++-mode-map (kbd "C-}") 'semantic-ia-fast-jump))
#+end_src

* Clang format
With clang format a source file can be automatically formatted according to a
set of rules (usually defined in a file =.clang-format= in the project root).
With the clang-format Emacs package it is possible to format the entire buffer,
but also to format a region or just the current line.
#+begin_src emacs-lisp
  (use-package clang-format
    :ensure t
    :bind (("C-=" . clang-format-region))
    :config

    (defun my-clang-format-buffer ()
      "Clang format entire C++ mode buffer before saving.

    Calls `clang-format-buffer' when the major-mode is `c++-mode'."
      (when (eq major-mode 'c++-mode) (clang-format-buffer)))

    (add-hook 'before-save-hook #'my-clang-format-buffer))
#+end_src

* Git for Windows path
Try and determine if Git is available. If it is, and we are on a Windows system,
also add =git-path/../usr/bin= to =exec-path=, to enable use of =diff=, =gpg=
and other tools. This way adding =git-path/../usr/bin= to the system PATH
environment variable can be avoided, which is probably not what you want on a
Windows system. If a Git executable cannot be found a message is displayed.
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (let* ((git-exe (executable-find "git"))
           (git-path (concat (file-name-directory git-exe) "../usr/bin")))
      (if git-exe
          (progn
            ;; On Windows installations the git binaries reside in either bin or
            ;; cmd, so add usr/bin relative to the git executable path.
            (add-to-list 'exec-path git-path :append)
            (setenv "PATH" (concat (getenv "PATH") ";" git-path ";"))

            ;; Set the path to gpg.
            (use-package epg
              :custom
              ;; This variable NEEDS to be set using customize, setting it
              ;; directly has no effect. See (describe-variable 'epg-gpg-program).
              (epg-gpg-program (concat git-path "/gpg"))))
        (message "Git not found, please update your PATH environment \
  variable to point to your Git installation."))))
#+end_src

* GPG / EasyPG
Ensure GnuPG password queries go through the minibuffer.
#+begin_src emacs-lisp
  (setq epg-pinentry-mode 'loopback)
#+end_src

* Dired-narrow
Dired-narrow is a nice package to do quick filtering in dired buffers.
#+begin_src emacs-lisp
  (use-package dired-narrow
    :ensure t
    :if (> emacs-major-version 24)
    :after dired
    :bind (:map dired-mode-map
                ("/" . dired-narrow)))
#+end_src

* Rainbow-delimiters
Set up [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters-mode]] for =prog-mode=. Most (if not all) programming
major modes are derived from =prog-mode=.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :pin melpa-stable
    :defer t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

* Markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :pin melpa-stable
    :defer t)

  (use-package markdown-toc
    :ensure t
    :pin melpa-stable
    :defer t)
#+end_src

* JSON mode
#+begin_src emacs-lisp
  (use-package json-mode
    :pin melpa-stable
    :defer t)
#+end_src

* Eglot
#+begin_src emacs-lisp
  (when (> emacs-major-version 25)
    (use-package eglot
      :ensure t
      :commands (eglot)
      :config
      (add-hook 'eglot-connect-hook
                (lambda (server)
                  "Use eglot xref backend when eglot is connected."
                  (evil-define-key 'normal c-mode-map   (kbd "C-]") 'evil-jump-to-tag)
                  (evil-define-key 'normal c++-mode-map (kbd "C-]") 'evil-jump-to-tag)))))
#+end_src

* Helm xref
Helm interface for xref results. Useful in combination with eglot.
#+begin_src emacs-lisp
  (use-package helm-xref
    :defer t)
#+end_src

* Highlight doxygen mode
#+begin_src emacs-lisp
  (use-package highlight-doxygen
    :ensure t
    :hook (c-mode-common-hook . highlight-doxygen-mode)
    :defer t)
#+end_src

* Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :pin melpa-stable
    :ensure t
    :defer t
    :bind (("C-c e" . elfeed)
           :map elfeed-search-mode-map
           ("R" . my-elfeed-untag-all-unread)
           ("0" . my-elfeed-filter-other)
           ("1" . my-elfeed-filter-nos)
           ("2" . my-elfeed-filter-nrc))
    :init
    (evil-set-initial-state 'elfeed-search-mode 'emacs)
    (evil-set-initial-state 'elfeed-show-mode 'emacs)
    :config
    (setq elfeed-sort-order 'ascending)
    (setq elfeed-search-title-max-width 120)
    (setq elfeed-feeds
          '("https://blogs.nasa.gov/artemis/feed/"
            ("https://feeds.nos.nl/nosnieuwsalgemeen" news nos)
            ("https://www.nrc.nl/rss/" news nrc)
            "https://github.com/git-for-windows/git/releases.atom"
            "https://nullprogram.com/feed/"))

    ;; Remove unread tag from news entries older than one day.
    (add-hook 'elfeed-new-entry-hook (elfeed-make-tagger :feed-url "nos.nl"
                                                         :before "1 day ago"
                                                         :remove 'unread))

    (add-hook 'elfeed-new-entry-hook (elfeed-make-tagger :feed-url "nrc.nl"
                                                         :before "1 day ago"
                                                         :remove 'unread))

    (defun my-elfeed-untag-all-unread ()
      "Remove the `unread' tag from all entries."
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))

    (defun my-elfeed-quick-filter (arg)
      "Reset search filter to to default value of `elfeed-search-filter' and append ARG."
      (interactive)
      (elfeed-search-clear-filter)
      (setq elfeed-search-filter (concat elfeed-search-filter " " arg))
      (elfeed-search-update :force))

    (defun my-elfeed-filter-nos ()
      (interactive)
      (my-elfeed-quick-filter "+nos"))

    (defun my-elfeed-filter-nrc ()
      (interactive)
      (my-elfeed-quick-filter "+nrc"))

    (defun my-elfeed-filter-other ()
      (interactive)
      (my-elfeed-quick-filter "-news")))
#+end_src

* COMMENT Local variables
# Local Variables:
# org-adapt-indentation: nil
# End:
